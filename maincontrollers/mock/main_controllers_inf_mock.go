// Code generated by MockGen. DO NOT EDIT.
// Source: ./inf.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockMainAttractionController is a mock of MainAttractionController interface.
type MockMainAttractionController struct {
	ctrl     *gomock.Controller
	recorder *MockMainAttractionControllerMockRecorder
}

// MockMainAttractionControllerMockRecorder is the mock recorder for MockMainAttractionController.
type MockMainAttractionControllerMockRecorder struct {
	mock *MockMainAttractionController
}

// NewMockMainAttractionController creates a new mock instance.
func NewMockMainAttractionController(ctrl *gomock.Controller) *MockMainAttractionController {
	mock := &MockMainAttractionController{ctrl: ctrl}
	mock.recorder = &MockMainAttractionControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainAttractionController) EXPECT() *MockMainAttractionControllerMockRecorder {
	return m.recorder
}

// CreateAttraction mocks base method.
func (m *MockMainAttractionController) CreateAttraction(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAttraction", c)
}

// CreateAttraction indicates an expected call of CreateAttraction.
func (mr *MockMainAttractionControllerMockRecorder) CreateAttraction(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttraction", reflect.TypeOf((*MockMainAttractionController)(nil).CreateAttraction), c)
}

// DeleteAttraction mocks base method.
func (m *MockMainAttractionController) DeleteAttraction(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAttraction", c)
}

// DeleteAttraction indicates an expected call of DeleteAttraction.
func (mr *MockMainAttractionControllerMockRecorder) DeleteAttraction(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttraction", reflect.TypeOf((*MockMainAttractionController)(nil).DeleteAttraction), c)
}

// GetAttraction mocks base method.
func (m *MockMainAttractionController) GetAttraction(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAttraction", c)
}

// GetAttraction indicates an expected call of GetAttraction.
func (mr *MockMainAttractionControllerMockRecorder) GetAttraction(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttraction", reflect.TypeOf((*MockMainAttractionController)(nil).GetAttraction), c)
}

// GetAttractionById mocks base method.
func (m *MockMainAttractionController) GetAttractionById(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAttractionById", c)
}

// GetAttractionById indicates an expected call of GetAttractionById.
func (mr *MockMainAttractionControllerMockRecorder) GetAttractionById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttractionById", reflect.TypeOf((*MockMainAttractionController)(nil).GetAttractionById), c)
}

// UpdateAttraction mocks base method.
func (m *MockMainAttractionController) UpdateAttraction(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAttraction", c)
}

// UpdateAttraction indicates an expected call of UpdateAttraction.
func (mr *MockMainAttractionControllerMockRecorder) UpdateAttraction(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttraction", reflect.TypeOf((*MockMainAttractionController)(nil).UpdateAttraction), c)
}

// MockMainEventController is a mock of MainEventController interface.
type MockMainEventController struct {
	ctrl     *gomock.Controller
	recorder *MockMainEventControllerMockRecorder
}

// MockMainEventControllerMockRecorder is the mock recorder for MockMainEventController.
type MockMainEventControllerMockRecorder struct {
	mock *MockMainEventController
}

// NewMockMainEventController creates a new mock instance.
func NewMockMainEventController(ctrl *gomock.Controller) *MockMainEventController {
	mock := &MockMainEventController{ctrl: ctrl}
	mock.recorder = &MockMainEventControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainEventController) EXPECT() *MockMainEventControllerMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockMainEventController) CreateEvent(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateEvent", c)
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockMainEventControllerMockRecorder) CreateEvent(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockMainEventController)(nil).CreateEvent), c)
}

// DeleteEvent mocks base method.
func (m *MockMainEventController) DeleteEvent(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteEvent", c)
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockMainEventControllerMockRecorder) DeleteEvent(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockMainEventController)(nil).DeleteEvent), c)
}

// GetEvent mocks base method.
func (m *MockMainEventController) GetEvent(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetEvent", c)
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockMainEventControllerMockRecorder) GetEvent(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockMainEventController)(nil).GetEvent), c)
}

// GetEventById mocks base method.
func (m *MockMainEventController) GetEventById(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetEventById", c)
}

// GetEventById indicates an expected call of GetEventById.
func (mr *MockMainEventControllerMockRecorder) GetEventById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockMainEventController)(nil).GetEventById), c)
}

// UpdateEvent mocks base method.
func (m *MockMainEventController) UpdateEvent(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateEvent", c)
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockMainEventControllerMockRecorder) UpdateEvent(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockMainEventController)(nil).UpdateEvent), c)
}

// MockMainItineraryController is a mock of MainItineraryController interface.
type MockMainItineraryController struct {
	ctrl     *gomock.Controller
	recorder *MockMainItineraryControllerMockRecorder
}

// MockMainItineraryControllerMockRecorder is the mock recorder for MockMainItineraryController.
type MockMainItineraryControllerMockRecorder struct {
	mock *MockMainItineraryController
}

// NewMockMainItineraryController creates a new mock instance.
func NewMockMainItineraryController(ctrl *gomock.Controller) *MockMainItineraryController {
	mock := &MockMainItineraryController{ctrl: ctrl}
	mock.recorder = &MockMainItineraryControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainItineraryController) EXPECT() *MockMainItineraryControllerMockRecorder {
	return m.recorder
}

// CreateItinerary mocks base method.
func (m *MockMainItineraryController) CreateItinerary(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateItinerary", c)
}

// CreateItinerary indicates an expected call of CreateItinerary.
func (mr *MockMainItineraryControllerMockRecorder) CreateItinerary(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItinerary", reflect.TypeOf((*MockMainItineraryController)(nil).CreateItinerary), c)
}

// DeleteItinerary mocks base method.
func (m *MockMainItineraryController) DeleteItinerary(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteItinerary", c)
}

// DeleteItinerary indicates an expected call of DeleteItinerary.
func (mr *MockMainItineraryControllerMockRecorder) DeleteItinerary(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItinerary", reflect.TypeOf((*MockMainItineraryController)(nil).DeleteItinerary), c)
}

// GetItinerary mocks base method.
func (m *MockMainItineraryController) GetItinerary(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetItinerary", c)
}

// GetItinerary indicates an expected call of GetItinerary.
func (mr *MockMainItineraryControllerMockRecorder) GetItinerary(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItinerary", reflect.TypeOf((*MockMainItineraryController)(nil).GetItinerary), c)
}

// GetItineraryById mocks base method.
func (m *MockMainItineraryController) GetItineraryById(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetItineraryById", c)
}

// GetItineraryById indicates an expected call of GetItineraryById.
func (mr *MockMainItineraryControllerMockRecorder) GetItineraryById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItineraryById", reflect.TypeOf((*MockMainItineraryController)(nil).GetItineraryById), c)
}

// UpdateItinerary mocks base method.
func (m *MockMainItineraryController) UpdateItinerary(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateItinerary", c)
}

// UpdateItinerary indicates an expected call of UpdateItinerary.
func (mr *MockMainItineraryControllerMockRecorder) UpdateItinerary(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItinerary", reflect.TypeOf((*MockMainItineraryController)(nil).UpdateItinerary), c)
}

// MockMainCoordinateController is a mock of MainCoordinateController interface.
type MockMainCoordinateController struct {
	ctrl     *gomock.Controller
	recorder *MockMainCoordinateControllerMockRecorder
}

// MockMainCoordinateControllerMockRecorder is the mock recorder for MockMainCoordinateController.
type MockMainCoordinateControllerMockRecorder struct {
	mock *MockMainCoordinateController
}

// NewMockMainCoordinateController creates a new mock instance.
func NewMockMainCoordinateController(ctrl *gomock.Controller) *MockMainCoordinateController {
	mock := &MockMainCoordinateController{ctrl: ctrl}
	mock.recorder = &MockMainCoordinateControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainCoordinateController) EXPECT() *MockMainCoordinateControllerMockRecorder {
	return m.recorder
}

// CreateCoordinate mocks base method.
func (m *MockMainCoordinateController) CreateCoordinate(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateCoordinate", c)
}

// CreateCoordinate indicates an expected call of CreateCoordinate.
func (mr *MockMainCoordinateControllerMockRecorder) CreateCoordinate(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoordinate", reflect.TypeOf((*MockMainCoordinateController)(nil).CreateCoordinate), c)
}

// DeleteCoordinate mocks base method.
func (m *MockMainCoordinateController) DeleteCoordinate(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCoordinate", c)
}

// DeleteCoordinate indicates an expected call of DeleteCoordinate.
func (mr *MockMainCoordinateControllerMockRecorder) DeleteCoordinate(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoordinate", reflect.TypeOf((*MockMainCoordinateController)(nil).DeleteCoordinate), c)
}

// GetCoordinate mocks base method.
func (m *MockMainCoordinateController) GetCoordinate(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetCoordinate", c)
}

// GetCoordinate indicates an expected call of GetCoordinate.
func (mr *MockMainCoordinateControllerMockRecorder) GetCoordinate(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinate", reflect.TypeOf((*MockMainCoordinateController)(nil).GetCoordinate), c)
}

// GetCoordinateById mocks base method.
func (m *MockMainCoordinateController) GetCoordinateById(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetCoordinateById", c)
}

// GetCoordinateById indicates an expected call of GetCoordinateById.
func (mr *MockMainCoordinateControllerMockRecorder) GetCoordinateById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinateById", reflect.TypeOf((*MockMainCoordinateController)(nil).GetCoordinateById), c)
}

// UpdateCoordinate mocks base method.
func (m *MockMainCoordinateController) UpdateCoordinate(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCoordinate", c)
}

// UpdateCoordinate indicates an expected call of UpdateCoordinate.
func (mr *MockMainCoordinateControllerMockRecorder) UpdateCoordinate(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoordinate", reflect.TypeOf((*MockMainCoordinateController)(nil).UpdateCoordinate), c)
}

// MockMainUserController is a mock of MainUserController interface.
type MockMainUserController struct {
	ctrl     *gomock.Controller
	recorder *MockMainUserControllerMockRecorder
}

// MockMainUserControllerMockRecorder is the mock recorder for MockMainUserController.
type MockMainUserControllerMockRecorder struct {
	mock *MockMainUserController
}

// NewMockMainUserController creates a new mock instance.
func NewMockMainUserController(ctrl *gomock.Controller) *MockMainUserController {
	mock := &MockMainUserController{ctrl: ctrl}
	mock.recorder = &MockMainUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainUserController) EXPECT() *MockMainUserControllerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockMainUserController) CreateUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUser", c)
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMainUserControllerMockRecorder) CreateUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMainUserController)(nil).CreateUser), c)
}

// DeleteUser mocks base method.
func (m *MockMainUserController) DeleteUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUser", c)
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockMainUserControllerMockRecorder) DeleteUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockMainUserController)(nil).DeleteUser), c)
}

// GetUser mocks base method.
func (m *MockMainUserController) GetUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUser", c)
}

// GetUser indicates an expected call of GetUser.
func (mr *MockMainUserControllerMockRecorder) GetUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockMainUserController)(nil).GetUser), c)
}

// GetUserById mocks base method.
func (m *MockMainUserController) GetUserById(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUserById", c)
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockMainUserControllerMockRecorder) GetUserById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockMainUserController)(nil).GetUserById), c)
}

// UpdateUser mocks base method.
func (m *MockMainUserController) UpdateUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUser", c)
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockMainUserControllerMockRecorder) UpdateUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockMainUserController)(nil).UpdateUser), c)
}

// MockMainRatingController is a mock of MainRatingController interface.
type MockMainRatingController struct {
	ctrl     *gomock.Controller
	recorder *MockMainRatingControllerMockRecorder
}

// MockMainRatingControllerMockRecorder is the mock recorder for MockMainRatingController.
type MockMainRatingControllerMockRecorder struct {
	mock *MockMainRatingController
}

// NewMockMainRatingController creates a new mock instance.
func NewMockMainRatingController(ctrl *gomock.Controller) *MockMainRatingController {
	mock := &MockMainRatingController{ctrl: ctrl}
	mock.recorder = &MockMainRatingControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainRatingController) EXPECT() *MockMainRatingControllerMockRecorder {
	return m.recorder
}

// CreateRating mocks base method.
func (m *MockMainRatingController) CreateRating(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateRating", c)
}

// CreateRating indicates an expected call of CreateRating.
func (mr *MockMainRatingControllerMockRecorder) CreateRating(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRating", reflect.TypeOf((*MockMainRatingController)(nil).CreateRating), c)
}

// DeleteRating mocks base method.
func (m *MockMainRatingController) DeleteRating(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRating", c)
}

// DeleteRating indicates an expected call of DeleteRating.
func (mr *MockMainRatingControllerMockRecorder) DeleteRating(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRating", reflect.TypeOf((*MockMainRatingController)(nil).DeleteRating), c)
}

// GetRating mocks base method.
func (m *MockMainRatingController) GetRating(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRating", c)
}

// GetRating indicates an expected call of GetRating.
func (mr *MockMainRatingControllerMockRecorder) GetRating(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockMainRatingController)(nil).GetRating), c)
}

// GetRatingById mocks base method.
func (m *MockMainRatingController) GetRatingById(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRatingById", c)
}

// GetRatingById indicates an expected call of GetRatingById.
func (mr *MockMainRatingControllerMockRecorder) GetRatingById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingById", reflect.TypeOf((*MockMainRatingController)(nil).GetRatingById), c)
}

// UpdateRating mocks base method.
func (m *MockMainRatingController) UpdateRating(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateRating", c)
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockMainRatingControllerMockRecorder) UpdateRating(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockMainRatingController)(nil).UpdateRating), c)
}

// MockMainTagController is a mock of MainTagController interface.
type MockMainTagController struct {
	ctrl     *gomock.Controller
	recorder *MockMainTagControllerMockRecorder
}

// MockMainTagControllerMockRecorder is the mock recorder for MockMainTagController.
type MockMainTagControllerMockRecorder struct {
	mock *MockMainTagController
}

// NewMockMainTagController creates a new mock instance.
func NewMockMainTagController(ctrl *gomock.Controller) *MockMainTagController {
	mock := &MockMainTagController{ctrl: ctrl}
	mock.recorder = &MockMainTagControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainTagController) EXPECT() *MockMainTagControllerMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockMainTagController) CreateTag(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTag", c)
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockMainTagControllerMockRecorder) CreateTag(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockMainTagController)(nil).CreateTag), c)
}

// DeleteTag mocks base method.
func (m *MockMainTagController) DeleteTag(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTag", c)
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockMainTagControllerMockRecorder) DeleteTag(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockMainTagController)(nil).DeleteTag), c)
}

// GetTag mocks base method.
func (m *MockMainTagController) GetTag(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetTag", c)
}

// GetTag indicates an expected call of GetTag.
func (mr *MockMainTagControllerMockRecorder) GetTag(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockMainTagController)(nil).GetTag), c)
}

// GetTagById mocks base method.
func (m *MockMainTagController) GetTagById(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetTagById", c)
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockMainTagControllerMockRecorder) GetTagById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockMainTagController)(nil).GetTagById), c)
}

// UpdateTag mocks base method.
func (m *MockMainTagController) UpdateTag(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTag", c)
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockMainTagControllerMockRecorder) UpdateTag(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockMainTagController)(nil).UpdateTag), c)
}
