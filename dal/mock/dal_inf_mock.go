// Code generated by MockGen. DO NOT EDIT.
// Source: ./inf.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "itineraryplanner/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockAttractionDal is a mock of AttractionDal interface.
type MockAttractionDal struct {
	ctrl     *gomock.Controller
	recorder *MockAttractionDalMockRecorder
}

// MockAttractionDalMockRecorder is the mock recorder for MockAttractionDal.
type MockAttractionDalMockRecorder struct {
	mock *MockAttractionDal
}

// NewMockAttractionDal creates a new mock instance.
func NewMockAttractionDal(ctrl *gomock.Controller) *MockAttractionDal {
	mock := &MockAttractionDal{ctrl: ctrl}
	mock.recorder = &MockAttractionDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttractionDal) EXPECT() *MockAttractionDalMockRecorder {
	return m.recorder
}

// CreateAttraction mocks base method.
func (m *MockAttractionDal) CreateAttraction(ctx context.Context, attraction *models.Attraction) (*models.Attraction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttraction", ctx, attraction)
	ret0, _ := ret[0].(*models.Attraction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttraction indicates an expected call of CreateAttraction.
func (mr *MockAttractionDalMockRecorder) CreateAttraction(ctx, attraction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttraction", reflect.TypeOf((*MockAttractionDal)(nil).CreateAttraction), ctx, attraction)
}

// DeleteAttraction mocks base method.
func (m *MockAttractionDal) DeleteAttraction(ctx context.Context, attractionId string) (*models.Attraction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttraction", ctx, attractionId)
	ret0, _ := ret[0].(*models.Attraction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttraction indicates an expected call of DeleteAttraction.
func (mr *MockAttractionDalMockRecorder) DeleteAttraction(ctx, attractionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttraction", reflect.TypeOf((*MockAttractionDal)(nil).DeleteAttraction), ctx, attractionId)
}

// GetAttraction mocks base method.
func (m *MockAttractionDal) GetAttraction(ctx context.Context) ([]*models.Attraction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttraction", ctx)
	ret0, _ := ret[0].([]*models.Attraction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttraction indicates an expected call of GetAttraction.
func (mr *MockAttractionDalMockRecorder) GetAttraction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttraction", reflect.TypeOf((*MockAttractionDal)(nil).GetAttraction), ctx)
}

// GetAttractionById mocks base method.
func (m *MockAttractionDal) GetAttractionById(ctx context.Context, attractionId string) (*models.Attraction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttractionById", ctx, attractionId)
	ret0, _ := ret[0].(*models.Attraction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttractionById indicates an expected call of GetAttractionById.
func (mr *MockAttractionDalMockRecorder) GetAttractionById(ctx, attractionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttractionById", reflect.TypeOf((*MockAttractionDal)(nil).GetAttractionById), ctx, attractionId)
}

// GetDB mocks base method.
func (m *MockAttractionDal) GetDB() *mongo.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockAttractionDalMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockAttractionDal)(nil).GetDB))
}

// UpdateAttraction mocks base method.
func (m *MockAttractionDal) UpdateAttraction(ctx context.Context, attraction *models.Attraction) (*models.Attraction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttraction", ctx, attraction)
	ret0, _ := ret[0].(*models.Attraction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttraction indicates an expected call of UpdateAttraction.
func (mr *MockAttractionDalMockRecorder) UpdateAttraction(ctx, attraction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttraction", reflect.TypeOf((*MockAttractionDal)(nil).UpdateAttraction), ctx, attraction)
}

// MockTagDal is a mock of TagDal interface.
type MockTagDal struct {
	ctrl     *gomock.Controller
	recorder *MockTagDalMockRecorder
}

// MockTagDalMockRecorder is the mock recorder for MockTagDal.
type MockTagDalMockRecorder struct {
	mock *MockTagDal
}

// NewMockTagDal creates a new mock instance.
func NewMockTagDal(ctrl *gomock.Controller) *MockTagDal {
	mock := &MockTagDal{ctrl: ctrl}
	mock.recorder = &MockTagDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagDal) EXPECT() *MockTagDalMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockTagDal) CreateTag(ctx context.Context, tag *models.Tag) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, tag)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockTagDalMockRecorder) CreateTag(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagDal)(nil).CreateTag), ctx, tag)
}

// DeleteTag mocks base method.
func (m *MockTagDal) DeleteTag(ctx context.Context, tagId string) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, tagId)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagDalMockRecorder) DeleteTag(ctx, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagDal)(nil).DeleteTag), ctx, tagId)
}

// GetDB mocks base method.
func (m *MockTagDal) GetDB() *mongo.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockTagDalMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockTagDal)(nil).GetDB))
}

// GetTag mocks base method.
func (m *MockTagDal) GetTag(ctx context.Context) ([]*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx)
	ret0, _ := ret[0].([]*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockTagDalMockRecorder) GetTag(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagDal)(nil).GetTag), ctx)
}

// GetTagById mocks base method.
func (m *MockTagDal) GetTagById(ctx context.Context, tagId string) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", ctx, tagId)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockTagDalMockRecorder) GetTagById(ctx, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockTagDal)(nil).GetTagById), ctx, tagId)
}

// UpdateTag mocks base method.
func (m *MockTagDal) UpdateTag(ctx context.Context, tag *models.Tag) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, tag)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockTagDalMockRecorder) UpdateTag(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagDal)(nil).UpdateTag), ctx, tag)
}

// MockEventDal is a mock of EventDal interface.
type MockEventDal struct {
	ctrl     *gomock.Controller
	recorder *MockEventDalMockRecorder
}

// MockEventDalMockRecorder is the mock recorder for MockEventDal.
type MockEventDalMockRecorder struct {
	mock *MockEventDal
}

// NewMockEventDal creates a new mock instance.
func NewMockEventDal(ctrl *gomock.Controller) *MockEventDal {
	mock := &MockEventDal{ctrl: ctrl}
	mock.recorder = &MockEventDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDal) EXPECT() *MockEventDalMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventDal) CreateEvent(ctx context.Context, event *models.Event) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventDalMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventDal)(nil).CreateEvent), ctx, event)
}

// DeleteEvent mocks base method.
func (m *MockEventDal) DeleteEvent(ctx context.Context, eventId string) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, eventId)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventDalMockRecorder) DeleteEvent(ctx, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventDal)(nil).DeleteEvent), ctx, eventId)
}

// GetDB mocks base method.
func (m *MockEventDal) GetDB() *mongo.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockEventDalMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockEventDal)(nil).GetDB))
}

// GetEvent mocks base method.
func (m *MockEventDal) GetEvent(ctx context.Context) ([]*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventDalMockRecorder) GetEvent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventDal)(nil).GetEvent), ctx)
}

// GetEventById mocks base method.
func (m *MockEventDal) GetEventById(ctx context.Context, eventId string) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventById", ctx, eventId)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventById indicates an expected call of GetEventById.
func (mr *MockEventDalMockRecorder) GetEventById(ctx, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockEventDal)(nil).GetEventById), ctx, eventId)
}

// UpdateEvent mocks base method.
func (m *MockEventDal) UpdateEvent(ctx context.Context, event *models.Event) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventDalMockRecorder) UpdateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventDal)(nil).UpdateEvent), ctx, event)
}

// MockRatingDal is a mock of RatingDal interface.
type MockRatingDal struct {
	ctrl     *gomock.Controller
	recorder *MockRatingDalMockRecorder
}

// MockRatingDalMockRecorder is the mock recorder for MockRatingDal.
type MockRatingDalMockRecorder struct {
	mock *MockRatingDal
}

// NewMockRatingDal creates a new mock instance.
func NewMockRatingDal(ctrl *gomock.Controller) *MockRatingDal {
	mock := &MockRatingDal{ctrl: ctrl}
	mock.recorder = &MockRatingDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingDal) EXPECT() *MockRatingDalMockRecorder {
	return m.recorder
}

// CreateRating mocks base method.
func (m *MockRatingDal) CreateRating(ctx context.Context, rating *models.Rating) (*models.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRating", ctx, rating)
	ret0, _ := ret[0].(*models.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRating indicates an expected call of CreateRating.
func (mr *MockRatingDalMockRecorder) CreateRating(ctx, rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRating", reflect.TypeOf((*MockRatingDal)(nil).CreateRating), ctx, rating)
}

// DeleteRating mocks base method.
func (m *MockRatingDal) DeleteRating(ctx context.Context, ratingId string) (*models.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRating", ctx, ratingId)
	ret0, _ := ret[0].(*models.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRating indicates an expected call of DeleteRating.
func (mr *MockRatingDalMockRecorder) DeleteRating(ctx, ratingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRating", reflect.TypeOf((*MockRatingDal)(nil).DeleteRating), ctx, ratingId)
}

// GetDB mocks base method.
func (m *MockRatingDal) GetDB() *mongo.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockRatingDalMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockRatingDal)(nil).GetDB))
}

// GetRating mocks base method.
func (m *MockRatingDal) GetRating(ctx context.Context) ([]*models.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", ctx)
	ret0, _ := ret[0].([]*models.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockRatingDalMockRecorder) GetRating(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockRatingDal)(nil).GetRating), ctx)
}

// GetRatingById mocks base method.
func (m *MockRatingDal) GetRatingById(ctx context.Context, attractionId string) (*models.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingById", ctx, attractionId)
	ret0, _ := ret[0].(*models.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingById indicates an expected call of GetRatingById.
func (mr *MockRatingDalMockRecorder) GetRatingById(ctx, attractionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingById", reflect.TypeOf((*MockRatingDal)(nil).GetRatingById), ctx, attractionId)
}

// UpdateRating mocks base method.
func (m *MockRatingDal) UpdateRating(ctx context.Context, rating *models.Rating) (*models.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", ctx, rating)
	ret0, _ := ret[0].(*models.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockRatingDalMockRecorder) UpdateRating(ctx, rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockRatingDal)(nil).UpdateRating), ctx, rating)
}

// MockItineraryDal is a mock of ItineraryDal interface.
type MockItineraryDal struct {
	ctrl     *gomock.Controller
	recorder *MockItineraryDalMockRecorder
}

// MockItineraryDalMockRecorder is the mock recorder for MockItineraryDal.
type MockItineraryDalMockRecorder struct {
	mock *MockItineraryDal
}

// NewMockItineraryDal creates a new mock instance.
func NewMockItineraryDal(ctrl *gomock.Controller) *MockItineraryDal {
	mock := &MockItineraryDal{ctrl: ctrl}
	mock.recorder = &MockItineraryDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItineraryDal) EXPECT() *MockItineraryDalMockRecorder {
	return m.recorder
}

// CreateItinerary mocks base method.
func (m *MockItineraryDal) CreateItinerary(ctx context.Context, itinerary *models.Itinerary) (*models.Itinerary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItinerary", ctx, itinerary)
	ret0, _ := ret[0].(*models.Itinerary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItinerary indicates an expected call of CreateItinerary.
func (mr *MockItineraryDalMockRecorder) CreateItinerary(ctx, itinerary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItinerary", reflect.TypeOf((*MockItineraryDal)(nil).CreateItinerary), ctx, itinerary)
}

// DeleteItinerary mocks base method.
func (m *MockItineraryDal) DeleteItinerary(ctx context.Context, itineraryId string) (*models.Itinerary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItinerary", ctx, itineraryId)
	ret0, _ := ret[0].(*models.Itinerary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItinerary indicates an expected call of DeleteItinerary.
func (mr *MockItineraryDalMockRecorder) DeleteItinerary(ctx, itineraryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItinerary", reflect.TypeOf((*MockItineraryDal)(nil).DeleteItinerary), ctx, itineraryId)
}

// GetDB mocks base method.
func (m *MockItineraryDal) GetDB() *mongo.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockItineraryDalMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockItineraryDal)(nil).GetDB))
}

// GetItinerary mocks base method.
func (m *MockItineraryDal) GetItinerary(ctx context.Context) ([]*models.Itinerary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItinerary", ctx)
	ret0, _ := ret[0].([]*models.Itinerary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItinerary indicates an expected call of GetItinerary.
func (mr *MockItineraryDalMockRecorder) GetItinerary(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItinerary", reflect.TypeOf((*MockItineraryDal)(nil).GetItinerary), ctx)
}

// GetItineraryById mocks base method.
func (m *MockItineraryDal) GetItineraryById(ctx context.Context, itineraryId string) (*models.Itinerary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItineraryById", ctx, itineraryId)
	ret0, _ := ret[0].(*models.Itinerary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItineraryById indicates an expected call of GetItineraryById.
func (mr *MockItineraryDalMockRecorder) GetItineraryById(ctx, itineraryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItineraryById", reflect.TypeOf((*MockItineraryDal)(nil).GetItineraryById), ctx, itineraryId)
}

// UpdateItinerary mocks base method.
func (m *MockItineraryDal) UpdateItinerary(ctx context.Context, itinerary *models.Itinerary) (*models.Itinerary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItinerary", ctx, itinerary)
	ret0, _ := ret[0].(*models.Itinerary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItinerary indicates an expected call of UpdateItinerary.
func (mr *MockItineraryDalMockRecorder) UpdateItinerary(ctx, itinerary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItinerary", reflect.TypeOf((*MockItineraryDal)(nil).UpdateItinerary), ctx, itinerary)
}

// MockUserDal is a mock of UserDal interface.
type MockUserDal struct {
	ctrl     *gomock.Controller
	recorder *MockUserDalMockRecorder
}

// MockUserDalMockRecorder is the mock recorder for MockUserDal.
type MockUserDalMockRecorder struct {
	mock *MockUserDal
}

// NewMockUserDal creates a new mock instance.
func NewMockUserDal(ctrl *gomock.Controller) *MockUserDal {
	mock := &MockUserDal{ctrl: ctrl}
	mock.recorder = &MockUserDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDal) EXPECT() *MockUserDalMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserDal) CreateUser(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDalMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDal)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserDal) DeleteUser(ctx context.Context, userId string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userId)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserDalMockRecorder) DeleteUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserDal)(nil).DeleteUser), ctx, userId)
}

// GetDB mocks base method.
func (m *MockUserDal) GetDB() *mongo.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockUserDalMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockUserDal)(nil).GetDB))
}

// GetUser mocks base method.
func (m *MockUserDal) GetUser(ctx context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserDalMockRecorder) GetUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDal)(nil).GetUser), ctx)
}

// GetUserById mocks base method.
func (m *MockUserDal) GetUserById(ctx context.Context, userId string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userId)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserDalMockRecorder) GetUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserDal)(nil).GetUserById), ctx, userId)
}

// UpdateUser mocks base method.
func (m *MockUserDal) UpdateUser(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserDalMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserDal)(nil).UpdateUser), ctx, user)
}
