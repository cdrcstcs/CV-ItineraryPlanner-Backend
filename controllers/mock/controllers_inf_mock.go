// Code generated by MockGen. DO NOT EDIT.
// Source: ./inf.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "itineraryplanner/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCreateAttractionController is a mock of CreateAttractionController interface.
type MockCreateAttractionController struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAttractionControllerMockRecorder
}

// MockCreateAttractionControllerMockRecorder is the mock recorder for MockCreateAttractionController.
type MockCreateAttractionControllerMockRecorder struct {
	mock *MockCreateAttractionController
}

// NewMockCreateAttractionController creates a new mock instance.
func NewMockCreateAttractionController(ctrl *gomock.Controller) *MockCreateAttractionController {
	mock := &MockCreateAttractionController{ctrl: ctrl}
	mock.recorder = &MockCreateAttractionControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateAttractionController) EXPECT() *MockCreateAttractionControllerMockRecorder {
	return m.recorder
}

// CreateAttraction mocks base method.
func (m *MockCreateAttractionController) CreateAttraction(ctx context.Context, req *models.CreateAttractionReq) (*models.CreateAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttraction", ctx, req)
	ret0, _ := ret[0].(*models.CreateAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttraction indicates an expected call of CreateAttraction.
func (mr *MockCreateAttractionControllerMockRecorder) CreateAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttraction", reflect.TypeOf((*MockCreateAttractionController)(nil).CreateAttraction), ctx, req)
}

// MockGetAttractionController is a mock of GetAttractionController interface.
type MockGetAttractionController struct {
	ctrl     *gomock.Controller
	recorder *MockGetAttractionControllerMockRecorder
}

// MockGetAttractionControllerMockRecorder is the mock recorder for MockGetAttractionController.
type MockGetAttractionControllerMockRecorder struct {
	mock *MockGetAttractionController
}

// NewMockGetAttractionController creates a new mock instance.
func NewMockGetAttractionController(ctrl *gomock.Controller) *MockGetAttractionController {
	mock := &MockGetAttractionController{ctrl: ctrl}
	mock.recorder = &MockGetAttractionControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAttractionController) EXPECT() *MockGetAttractionControllerMockRecorder {
	return m.recorder
}

// GetAttraction mocks base method.
func (m *MockGetAttractionController) GetAttraction(ctx context.Context, req *models.GetAttractionReq) (*models.GetAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttraction", ctx, req)
	ret0, _ := ret[0].(*models.GetAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttraction indicates an expected call of GetAttraction.
func (mr *MockGetAttractionControllerMockRecorder) GetAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttraction", reflect.TypeOf((*MockGetAttractionController)(nil).GetAttraction), ctx, req)
}

// MockItineraryController is a mock of ItineraryController interface.
type MockItineraryController struct {
	ctrl     *gomock.Controller
	recorder *MockItineraryControllerMockRecorder
}

// MockItineraryControllerMockRecorder is the mock recorder for MockItineraryController.
type MockItineraryControllerMockRecorder struct {
	mock *MockItineraryController
}

// NewMockItineraryController creates a new mock instance.
func NewMockItineraryController(ctrl *gomock.Controller) *MockItineraryController {
	mock := &MockItineraryController{ctrl: ctrl}
	mock.recorder = &MockItineraryControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItineraryController) EXPECT() *MockItineraryControllerMockRecorder {
	return m.recorder
}

// CreateItinerary mocks base method.
func (m *MockItineraryController) CreateItinerary(ctx context.Context, req *models.CreateItineraryReq) (*models.CreateItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItinerary", ctx, req)
	ret0, _ := ret[0].(*models.CreateItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItinerary indicates an expected call of CreateItinerary.
func (mr *MockItineraryControllerMockRecorder) CreateItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItinerary", reflect.TypeOf((*MockItineraryController)(nil).CreateItinerary), ctx, req)
}

// MockEventController is a mock of EventController interface.
type MockEventController struct {
	ctrl     *gomock.Controller
	recorder *MockEventControllerMockRecorder
}

// MockEventControllerMockRecorder is the mock recorder for MockEventController.
type MockEventControllerMockRecorder struct {
	mock *MockEventController
}

// NewMockEventController creates a new mock instance.
func NewMockEventController(ctrl *gomock.Controller) *MockEventController {
	mock := &MockEventController{ctrl: ctrl}
	mock.recorder = &MockEventControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventController) EXPECT() *MockEventControllerMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventController) CreateEvent(ctx context.Context, req *models.CreateEventReq) (*models.CreateAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, req)
	ret0, _ := ret[0].(*models.CreateAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventControllerMockRecorder) CreateEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventController)(nil).CreateEvent), ctx, req)
}

// MockUserController is a mock of UserController interface.
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController.
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance.
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserController) CreateUser(ctx context.Context, req *models.CreateUserReq) (*models.CreateUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*models.CreateUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserControllerMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserController)(nil).CreateUser), ctx, req)
}
