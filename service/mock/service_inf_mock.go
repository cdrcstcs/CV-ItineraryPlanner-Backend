// Code generated by MockGen. DO NOT EDIT.
// Source: ./inf.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "itineraryplanner/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAttractionService is a mock of AttractionService interface.
type MockAttractionService struct {
	ctrl     *gomock.Controller
	recorder *MockAttractionServiceMockRecorder
}

// MockAttractionServiceMockRecorder is the mock recorder for MockAttractionService.
type MockAttractionServiceMockRecorder struct {
	mock *MockAttractionService
}

// NewMockAttractionService creates a new mock instance.
func NewMockAttractionService(ctrl *gomock.Controller) *MockAttractionService {
	mock := &MockAttractionService{ctrl: ctrl}
	mock.recorder = &MockAttractionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttractionService) EXPECT() *MockAttractionServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOAttraction mocks base method.
func (m *MockAttractionService) ConvertDBOToDTOAttraction(ctx context.Context, att *models.Attraction) (*models.AttractionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOAttraction", ctx, att)
	ret0, _ := ret[0].(*models.AttractionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOAttraction indicates an expected call of ConvertDBOToDTOAttraction.
func (mr *MockAttractionServiceMockRecorder) ConvertDBOToDTOAttraction(ctx, att interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOAttraction", reflect.TypeOf((*MockAttractionService)(nil).ConvertDBOToDTOAttraction), ctx, att)
}

// CreateAttraction mocks base method.
func (m *MockAttractionService) CreateAttraction(ctx context.Context, req *models.CreateAttractionReq) (*models.CreateAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttraction", ctx, req)
	ret0, _ := ret[0].(*models.CreateAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttraction indicates an expected call of CreateAttraction.
func (mr *MockAttractionServiceMockRecorder) CreateAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttraction", reflect.TypeOf((*MockAttractionService)(nil).CreateAttraction), ctx, req)
}

// DeleteAttraction mocks base method.
func (m *MockAttractionService) DeleteAttraction(ctx context.Context, req *models.DeleteAttractionReq) (*models.DeleteAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttraction", ctx, req)
	ret0, _ := ret[0].(*models.DeleteAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttraction indicates an expected call of DeleteAttraction.
func (mr *MockAttractionServiceMockRecorder) DeleteAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttraction", reflect.TypeOf((*MockAttractionService)(nil).DeleteAttraction), ctx, req)
}

// GetAttraction mocks base method.
func (m *MockAttractionService) GetAttraction(ctx context.Context, req *models.GetAttractionReq) (*models.GetAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttraction", ctx, req)
	ret0, _ := ret[0].(*models.GetAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttraction indicates an expected call of GetAttraction.
func (mr *MockAttractionServiceMockRecorder) GetAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttraction", reflect.TypeOf((*MockAttractionService)(nil).GetAttraction), ctx, req)
}

// GetAttractionById mocks base method.
func (m *MockAttractionService) GetAttractionById(ctx context.Context, req *models.GetAttractionByIdReq) (*models.GetAttractionByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttractionById", ctx, req)
	ret0, _ := ret[0].(*models.GetAttractionByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttractionById indicates an expected call of GetAttractionById.
func (mr *MockAttractionServiceMockRecorder) GetAttractionById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttractionById", reflect.TypeOf((*MockAttractionService)(nil).GetAttractionById), ctx, req)
}

// UpdateAttraction mocks base method.
func (m *MockAttractionService) UpdateAttraction(ctx context.Context, req *models.UpdateAttractionReq) (*models.UpdateAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttraction", ctx, req)
	ret0, _ := ret[0].(*models.UpdateAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttraction indicates an expected call of UpdateAttraction.
func (mr *MockAttractionServiceMockRecorder) UpdateAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttraction", reflect.TypeOf((*MockAttractionService)(nil).UpdateAttraction), ctx, req)
}

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOEvent mocks base method.
func (m *MockEventService) ConvertDBOToDTOEvent(ctx context.Context, att *models.Event) (*models.EventDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOEvent", ctx, att)
	ret0, _ := ret[0].(*models.EventDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOEvent indicates an expected call of ConvertDBOToDTOEvent.
func (mr *MockEventServiceMockRecorder) ConvertDBOToDTOEvent(ctx, att interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOEvent", reflect.TypeOf((*MockEventService)(nil).ConvertDBOToDTOEvent), ctx, att)
}

// CreateEvent mocks base method.
func (m *MockEventService) CreateEvent(ctx context.Context, req *models.CreateEventReq) (*models.CreateEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, req)
	ret0, _ := ret[0].(*models.CreateEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventServiceMockRecorder) CreateEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventService)(nil).CreateEvent), ctx, req)
}

// DeleteEvent mocks base method.
func (m *MockEventService) DeleteEvent(ctx context.Context, req *models.DeleteEventReq) (*models.DeleteEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, req)
	ret0, _ := ret[0].(*models.DeleteEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventServiceMockRecorder) DeleteEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventService)(nil).DeleteEvent), ctx, req)
}

// GetEvent mocks base method.
func (m *MockEventService) GetEvent(ctx context.Context, req *models.GetEventReq) (*models.GetEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, req)
	ret0, _ := ret[0].(*models.GetEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventServiceMockRecorder) GetEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventService)(nil).GetEvent), ctx, req)
}

// GetEventById mocks base method.
func (m *MockEventService) GetEventById(ctx context.Context, req *models.GetEventByIdReq) (*models.GetEventByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventById", ctx, req)
	ret0, _ := ret[0].(*models.GetEventByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventById indicates an expected call of GetEventById.
func (mr *MockEventServiceMockRecorder) GetEventById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockEventService)(nil).GetEventById), ctx, req)
}

// UpdateEvent mocks base method.
func (m *MockEventService) UpdateEvent(ctx context.Context, req *models.UpdateEventReq) (*models.UpdateEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, req)
	ret0, _ := ret[0].(*models.UpdateEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventServiceMockRecorder) UpdateEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventService)(nil).UpdateEvent), ctx, req)
}

// MockRatingService is a mock of RatingService interface.
type MockRatingService struct {
	ctrl     *gomock.Controller
	recorder *MockRatingServiceMockRecorder
}

// MockRatingServiceMockRecorder is the mock recorder for MockRatingService.
type MockRatingServiceMockRecorder struct {
	mock *MockRatingService
}

// NewMockRatingService creates a new mock instance.
func NewMockRatingService(ctrl *gomock.Controller) *MockRatingService {
	mock := &MockRatingService{ctrl: ctrl}
	mock.recorder = &MockRatingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingService) EXPECT() *MockRatingServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTORating mocks base method.
func (m *MockRatingService) ConvertDBOToDTORating(ctx context.Context, att *models.Rating) (*models.RatingDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTORating", ctx, att)
	ret0, _ := ret[0].(*models.RatingDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTORating indicates an expected call of ConvertDBOToDTORating.
func (mr *MockRatingServiceMockRecorder) ConvertDBOToDTORating(ctx, att interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTORating", reflect.TypeOf((*MockRatingService)(nil).ConvertDBOToDTORating), ctx, att)
}

// CreateRating mocks base method.
func (m *MockRatingService) CreateRating(ctx context.Context, req *models.CreateRatingReq) (*models.CreateRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRating", ctx, req)
	ret0, _ := ret[0].(*models.CreateRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRating indicates an expected call of CreateRating.
func (mr *MockRatingServiceMockRecorder) CreateRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRating", reflect.TypeOf((*MockRatingService)(nil).CreateRating), ctx, req)
}

// DeleteRating mocks base method.
func (m *MockRatingService) DeleteRating(ctx context.Context, req *models.DeleteRatingReq) (*models.DeleteRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRating", ctx, req)
	ret0, _ := ret[0].(*models.DeleteRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRating indicates an expected call of DeleteRating.
func (mr *MockRatingServiceMockRecorder) DeleteRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRating", reflect.TypeOf((*MockRatingService)(nil).DeleteRating), ctx, req)
}

// GetRating mocks base method.
func (m *MockRatingService) GetRating(ctx context.Context, req *models.GetRatingReq) (*models.GetRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", ctx, req)
	ret0, _ := ret[0].(*models.GetRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockRatingServiceMockRecorder) GetRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockRatingService)(nil).GetRating), ctx, req)
}

// GetRatingById mocks base method.
func (m *MockRatingService) GetRatingById(ctx context.Context, req *models.GetRatingByIdReq) (*models.GetRatingByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingById", ctx, req)
	ret0, _ := ret[0].(*models.GetRatingByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingById indicates an expected call of GetRatingById.
func (mr *MockRatingServiceMockRecorder) GetRatingById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingById", reflect.TypeOf((*MockRatingService)(nil).GetRatingById), ctx, req)
}

// UpdateRating mocks base method.
func (m *MockRatingService) UpdateRating(ctx context.Context, req *models.UpdateRatingReq) (*models.UpdateRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", ctx, req)
	ret0, _ := ret[0].(*models.UpdateRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockRatingServiceMockRecorder) UpdateRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockRatingService)(nil).UpdateRating), ctx, req)
}

// MockItineraryService is a mock of ItineraryService interface.
type MockItineraryService struct {
	ctrl     *gomock.Controller
	recorder *MockItineraryServiceMockRecorder
}

// MockItineraryServiceMockRecorder is the mock recorder for MockItineraryService.
type MockItineraryServiceMockRecorder struct {
	mock *MockItineraryService
}

// NewMockItineraryService creates a new mock instance.
func NewMockItineraryService(ctrl *gomock.Controller) *MockItineraryService {
	mock := &MockItineraryService{ctrl: ctrl}
	mock.recorder = &MockItineraryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItineraryService) EXPECT() *MockItineraryServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOItinerary mocks base method.
func (m *MockItineraryService) ConvertDBOToDTOItinerary(ctx context.Context, att *models.Itinerary) (*models.ItineraryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOItinerary", ctx, att)
	ret0, _ := ret[0].(*models.ItineraryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOItinerary indicates an expected call of ConvertDBOToDTOItinerary.
func (mr *MockItineraryServiceMockRecorder) ConvertDBOToDTOItinerary(ctx, att interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOItinerary", reflect.TypeOf((*MockItineraryService)(nil).ConvertDBOToDTOItinerary), ctx, att)
}

// CreateItinerary mocks base method.
func (m *MockItineraryService) CreateItinerary(ctx context.Context, req *models.CreateItineraryReq) (*models.CreateItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItinerary", ctx, req)
	ret0, _ := ret[0].(*models.CreateItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItinerary indicates an expected call of CreateItinerary.
func (mr *MockItineraryServiceMockRecorder) CreateItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItinerary", reflect.TypeOf((*MockItineraryService)(nil).CreateItinerary), ctx, req)
}

// DeleteItinerary mocks base method.
func (m *MockItineraryService) DeleteItinerary(ctx context.Context, req *models.DeleteItineraryReq) (*models.DeleteItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItinerary", ctx, req)
	ret0, _ := ret[0].(*models.DeleteItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItinerary indicates an expected call of DeleteItinerary.
func (mr *MockItineraryServiceMockRecorder) DeleteItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItinerary", reflect.TypeOf((*MockItineraryService)(nil).DeleteItinerary), ctx, req)
}

// GetItinerary mocks base method.
func (m *MockItineraryService) GetItinerary(ctx context.Context, req *models.GetItineraryReq) (*models.GetItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItinerary", ctx, req)
	ret0, _ := ret[0].(*models.GetItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItinerary indicates an expected call of GetItinerary.
func (mr *MockItineraryServiceMockRecorder) GetItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItinerary", reflect.TypeOf((*MockItineraryService)(nil).GetItinerary), ctx, req)
}

// GetItineraryById mocks base method.
func (m *MockItineraryService) GetItineraryById(ctx context.Context, req *models.GetItineraryByIdReq) (*models.GetItineraryByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItineraryById", ctx, req)
	ret0, _ := ret[0].(*models.GetItineraryByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItineraryById indicates an expected call of GetItineraryById.
func (mr *MockItineraryServiceMockRecorder) GetItineraryById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItineraryById", reflect.TypeOf((*MockItineraryService)(nil).GetItineraryById), ctx, req)
}

// UpdateItinerary mocks base method.
func (m *MockItineraryService) UpdateItinerary(ctx context.Context, req *models.UpdateItineraryReq) (*models.UpdateItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItinerary", ctx, req)
	ret0, _ := ret[0].(*models.UpdateItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItinerary indicates an expected call of UpdateItinerary.
func (mr *MockItineraryServiceMockRecorder) UpdateItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItinerary", reflect.TypeOf((*MockItineraryService)(nil).UpdateItinerary), ctx, req)
}

// MockTagService is a mock of TagService interface.
type MockTagService struct {
	ctrl     *gomock.Controller
	recorder *MockTagServiceMockRecorder
}

// MockTagServiceMockRecorder is the mock recorder for MockTagService.
type MockTagServiceMockRecorder struct {
	mock *MockTagService
}

// NewMockTagService creates a new mock instance.
func NewMockTagService(ctrl *gomock.Controller) *MockTagService {
	mock := &MockTagService{ctrl: ctrl}
	mock.recorder = &MockTagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagService) EXPECT() *MockTagServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOTag mocks base method.
func (m *MockTagService) ConvertDBOToDTOTag(ctx context.Context, att *models.Tag) (*models.TagDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOTag", ctx, att)
	ret0, _ := ret[0].(*models.TagDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOTag indicates an expected call of ConvertDBOToDTOTag.
func (mr *MockTagServiceMockRecorder) ConvertDBOToDTOTag(ctx, att interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOTag", reflect.TypeOf((*MockTagService)(nil).ConvertDBOToDTOTag), ctx, att)
}

// CreateTag mocks base method.
func (m *MockTagService) CreateTag(ctx context.Context, req *models.CreateTagReq) (*models.CreateTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, req)
	ret0, _ := ret[0].(*models.CreateTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockTagServiceMockRecorder) CreateTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagService)(nil).CreateTag), ctx, req)
}

// DeleteTag mocks base method.
func (m *MockTagService) DeleteTag(ctx context.Context, req *models.DeleteTagReq) (*models.DeleteTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, req)
	ret0, _ := ret[0].(*models.DeleteTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagServiceMockRecorder) DeleteTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagService)(nil).DeleteTag), ctx, req)
}

// GetTag mocks base method.
func (m *MockTagService) GetTag(ctx context.Context, req *models.GetTagReq) (*models.GetTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, req)
	ret0, _ := ret[0].(*models.GetTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockTagServiceMockRecorder) GetTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagService)(nil).GetTag), ctx, req)
}

// GetTagById mocks base method.
func (m *MockTagService) GetTagById(ctx context.Context, req *models.GetTagByIdReq) (*models.GetTagByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", ctx, req)
	ret0, _ := ret[0].(*models.GetTagByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockTagServiceMockRecorder) GetTagById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockTagService)(nil).GetTagById), ctx, req)
}

// UpdateTag mocks base method.
func (m *MockTagService) UpdateTag(ctx context.Context, req *models.UpdateTagReq) (*models.UpdateTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, req)
	ret0, _ := ret[0].(*models.UpdateTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockTagServiceMockRecorder) UpdateTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagService)(nil).UpdateTag), ctx, req)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOUser mocks base method.
func (m *MockUserService) ConvertDBOToDTOUser(ctx context.Context, att *models.User) (*models.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOUser", ctx, att)
	ret0, _ := ret[0].(*models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOUser indicates an expected call of ConvertDBOToDTOUser.
func (mr *MockUserServiceMockRecorder) ConvertDBOToDTOUser(ctx, att interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOUser", reflect.TypeOf((*MockUserService)(nil).ConvertDBOToDTOUser), ctx, att)
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, req *models.CreateUserReq) (*models.CreateUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*models.CreateUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, req)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, req *models.DeleteUserReq) (*models.DeleteUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, req)
	ret0, _ := ret[0].(*models.DeleteUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, req)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(ctx context.Context, req *models.GetUserReq) (*models.GetUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, req)
	ret0, _ := ret[0].(*models.GetUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), ctx, req)
}

// GetUserById mocks base method.
func (m *MockUserService) GetUserById(ctx context.Context, req *models.GetUserByIdReq) (*models.GetUserByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, req)
	ret0, _ := ret[0].(*models.GetUserByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserServiceMockRecorder) GetUserById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserService)(nil).GetUserById), ctx, req)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(ctx context.Context, req *models.UpdateUserReq) (*models.UpdateUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, req)
	ret0, _ := ret[0].(*models.UpdateUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), ctx, req)
}
