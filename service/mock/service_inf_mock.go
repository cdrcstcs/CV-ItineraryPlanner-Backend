// Code generated by MockGen. DO NOT EDIT.
// Source: ./inf.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "itineraryplanner/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCreateAttractionService is a mock of CreateAttractionService interface.
type MockCreateAttractionService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAttractionServiceMockRecorder
}

// MockCreateAttractionServiceMockRecorder is the mock recorder for MockCreateAttractionService.
type MockCreateAttractionServiceMockRecorder struct {
	mock *MockCreateAttractionService
}

// NewMockCreateAttractionService creates a new mock instance.
func NewMockCreateAttractionService(ctrl *gomock.Controller) *MockCreateAttractionService {
	mock := &MockCreateAttractionService{ctrl: ctrl}
	mock.recorder = &MockCreateAttractionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateAttractionService) EXPECT() *MockCreateAttractionServiceMockRecorder {
	return m.recorder
}

// CreateAttraction mocks base method.
func (m *MockCreateAttractionService) CreateAttraction(ctx context.Context, req *models.CreateAttractionReq) (*models.CreateAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttraction", ctx, req)
	ret0, _ := ret[0].(*models.CreateAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttraction indicates an expected call of CreateAttraction.
func (mr *MockCreateAttractionServiceMockRecorder) CreateAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttraction", reflect.TypeOf((*MockCreateAttractionService)(nil).CreateAttraction), ctx, req)
}

// MockGetAttractionByIdService is a mock of GetAttractionByIdService interface.
type MockGetAttractionByIdService struct {
	ctrl     *gomock.Controller
	recorder *MockGetAttractionByIdServiceMockRecorder
}

// MockGetAttractionByIdServiceMockRecorder is the mock recorder for MockGetAttractionByIdService.
type MockGetAttractionByIdServiceMockRecorder struct {
	mock *MockGetAttractionByIdService
}

// NewMockGetAttractionByIdService creates a new mock instance.
func NewMockGetAttractionByIdService(ctrl *gomock.Controller) *MockGetAttractionByIdService {
	mock := &MockGetAttractionByIdService{ctrl: ctrl}
	mock.recorder = &MockGetAttractionByIdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAttractionByIdService) EXPECT() *MockGetAttractionByIdServiceMockRecorder {
	return m.recorder
}

// GetAttractionById mocks base method.
func (m *MockGetAttractionByIdService) GetAttractionById(ctx context.Context, req *models.GetAttractionByIdReq) (*models.GetAttractionByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttractionById", ctx, req)
	ret0, _ := ret[0].(*models.GetAttractionByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttractionById indicates an expected call of GetAttractionById.
func (mr *MockGetAttractionByIdServiceMockRecorder) GetAttractionById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttractionById", reflect.TypeOf((*MockGetAttractionByIdService)(nil).GetAttractionById), ctx, req)
}

// MockGetAttractionService is a mock of GetAttractionService interface.
type MockGetAttractionService struct {
	ctrl     *gomock.Controller
	recorder *MockGetAttractionServiceMockRecorder
}

// MockGetAttractionServiceMockRecorder is the mock recorder for MockGetAttractionService.
type MockGetAttractionServiceMockRecorder struct {
	mock *MockGetAttractionService
}

// NewMockGetAttractionService creates a new mock instance.
func NewMockGetAttractionService(ctrl *gomock.Controller) *MockGetAttractionService {
	mock := &MockGetAttractionService{ctrl: ctrl}
	mock.recorder = &MockGetAttractionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAttractionService) EXPECT() *MockGetAttractionServiceMockRecorder {
	return m.recorder
}

// GetAttraction mocks base method.
func (m *MockGetAttractionService) GetAttraction(ctx context.Context, req *models.GetAttractionReq) (*models.GetAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttraction", ctx, req)
	ret0, _ := ret[0].(*models.GetAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttraction indicates an expected call of GetAttraction.
func (mr *MockGetAttractionServiceMockRecorder) GetAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttraction", reflect.TypeOf((*MockGetAttractionService)(nil).GetAttraction), ctx, req)
}

// MockUpdateAttractionService is a mock of UpdateAttractionService interface.
type MockUpdateAttractionService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateAttractionServiceMockRecorder
}

// MockUpdateAttractionServiceMockRecorder is the mock recorder for MockUpdateAttractionService.
type MockUpdateAttractionServiceMockRecorder struct {
	mock *MockUpdateAttractionService
}

// NewMockUpdateAttractionService creates a new mock instance.
func NewMockUpdateAttractionService(ctrl *gomock.Controller) *MockUpdateAttractionService {
	mock := &MockUpdateAttractionService{ctrl: ctrl}
	mock.recorder = &MockUpdateAttractionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateAttractionService) EXPECT() *MockUpdateAttractionServiceMockRecorder {
	return m.recorder
}

// UpdateAttraction mocks base method.
func (m *MockUpdateAttractionService) UpdateAttraction(ctx context.Context, req *models.UpdateAttractionReq) (*models.UpdateAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttraction", ctx, req)
	ret0, _ := ret[0].(*models.UpdateAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttraction indicates an expected call of UpdateAttraction.
func (mr *MockUpdateAttractionServiceMockRecorder) UpdateAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttraction", reflect.TypeOf((*MockUpdateAttractionService)(nil).UpdateAttraction), ctx, req)
}

// MockDeleteAttractionService is a mock of DeleteAttractionService interface.
type MockDeleteAttractionService struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteAttractionServiceMockRecorder
}

// MockDeleteAttractionServiceMockRecorder is the mock recorder for MockDeleteAttractionService.
type MockDeleteAttractionServiceMockRecorder struct {
	mock *MockDeleteAttractionService
}

// NewMockDeleteAttractionService creates a new mock instance.
func NewMockDeleteAttractionService(ctrl *gomock.Controller) *MockDeleteAttractionService {
	mock := &MockDeleteAttractionService{ctrl: ctrl}
	mock.recorder = &MockDeleteAttractionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteAttractionService) EXPECT() *MockDeleteAttractionServiceMockRecorder {
	return m.recorder
}

// DeleteAttraction mocks base method.
func (m *MockDeleteAttractionService) DeleteAttraction(ctx context.Context, req *models.DeleteAttractionReq) (*models.DeleteAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttraction", ctx, req)
	ret0, _ := ret[0].(*models.DeleteAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttraction indicates an expected call of DeleteAttraction.
func (mr *MockDeleteAttractionServiceMockRecorder) DeleteAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttraction", reflect.TypeOf((*MockDeleteAttractionService)(nil).DeleteAttraction), ctx, req)
}

// MockAttractionService is a mock of AttractionService interface.
type MockAttractionService struct {
	ctrl     *gomock.Controller
	recorder *MockAttractionServiceMockRecorder
}

// MockAttractionServiceMockRecorder is the mock recorder for MockAttractionService.
type MockAttractionServiceMockRecorder struct {
	mock *MockAttractionService
}

// NewMockAttractionService creates a new mock instance.
func NewMockAttractionService(ctrl *gomock.Controller) *MockAttractionService {
	mock := &MockAttractionService{ctrl: ctrl}
	mock.recorder = &MockAttractionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttractionService) EXPECT() *MockAttractionServiceMockRecorder {
	return m.recorder
}

// CreateAttraction mocks base method.
func (m *MockAttractionService) CreateAttraction(ctx context.Context, req *models.CreateAttractionReq) (*models.CreateAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttraction", ctx, req)
	ret0, _ := ret[0].(*models.CreateAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttraction indicates an expected call of CreateAttraction.
func (mr *MockAttractionServiceMockRecorder) CreateAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttraction", reflect.TypeOf((*MockAttractionService)(nil).CreateAttraction), ctx, req)
}

// DeleteAttraction mocks base method.
func (m *MockAttractionService) DeleteAttraction(ctx context.Context, req *models.DeleteAttractionReq) (*models.DeleteAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttraction", ctx, req)
	ret0, _ := ret[0].(*models.DeleteAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttraction indicates an expected call of DeleteAttraction.
func (mr *MockAttractionServiceMockRecorder) DeleteAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttraction", reflect.TypeOf((*MockAttractionService)(nil).DeleteAttraction), ctx, req)
}

// GetAttraction mocks base method.
func (m *MockAttractionService) GetAttraction(ctx context.Context, req *models.GetAttractionReq) (*models.GetAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttraction", ctx, req)
	ret0, _ := ret[0].(*models.GetAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttraction indicates an expected call of GetAttraction.
func (mr *MockAttractionServiceMockRecorder) GetAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttraction", reflect.TypeOf((*MockAttractionService)(nil).GetAttraction), ctx, req)
}

// GetAttractionById mocks base method.
func (m *MockAttractionService) GetAttractionById(ctx context.Context, req *models.GetAttractionByIdReq) (*models.GetAttractionByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttractionById", ctx, req)
	ret0, _ := ret[0].(*models.GetAttractionByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttractionById indicates an expected call of GetAttractionById.
func (mr *MockAttractionServiceMockRecorder) GetAttractionById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttractionById", reflect.TypeOf((*MockAttractionService)(nil).GetAttractionById), ctx, req)
}

// UpdateAttraction mocks base method.
func (m *MockAttractionService) UpdateAttraction(ctx context.Context, req *models.UpdateAttractionReq) (*models.UpdateAttractionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttraction", ctx, req)
	ret0, _ := ret[0].(*models.UpdateAttractionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttraction indicates an expected call of UpdateAttraction.
func (mr *MockAttractionServiceMockRecorder) UpdateAttraction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttraction", reflect.TypeOf((*MockAttractionService)(nil).UpdateAttraction), ctx, req)
}

// MockAttractionDTOService is a mock of AttractionDTOService interface.
type MockAttractionDTOService struct {
	ctrl     *gomock.Controller
	recorder *MockAttractionDTOServiceMockRecorder
}

// MockAttractionDTOServiceMockRecorder is the mock recorder for MockAttractionDTOService.
type MockAttractionDTOServiceMockRecorder struct {
	mock *MockAttractionDTOService
}

// NewMockAttractionDTOService creates a new mock instance.
func NewMockAttractionDTOService(ctrl *gomock.Controller) *MockAttractionDTOService {
	mock := &MockAttractionDTOService{ctrl: ctrl}
	mock.recorder = &MockAttractionDTOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttractionDTOService) EXPECT() *MockAttractionDTOServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOAttraction mocks base method.
func (m *MockAttractionDTOService) ConvertDBOToDTOAttraction(ctx context.Context, att *models.Attraction) (*models.AttractionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOAttraction", ctx, att)
	ret0, _ := ret[0].(*models.AttractionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOAttraction indicates an expected call of ConvertDBOToDTOAttraction.
func (mr *MockAttractionDTOServiceMockRecorder) ConvertDBOToDTOAttraction(ctx, att interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOAttraction", reflect.TypeOf((*MockAttractionDTOService)(nil).ConvertDBOToDTOAttraction), ctx, att)
}

// MockCreateEventService is a mock of CreateEventService interface.
type MockCreateEventService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateEventServiceMockRecorder
}

// MockCreateEventServiceMockRecorder is the mock recorder for MockCreateEventService.
type MockCreateEventServiceMockRecorder struct {
	mock *MockCreateEventService
}

// NewMockCreateEventService creates a new mock instance.
func NewMockCreateEventService(ctrl *gomock.Controller) *MockCreateEventService {
	mock := &MockCreateEventService{ctrl: ctrl}
	mock.recorder = &MockCreateEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateEventService) EXPECT() *MockCreateEventServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockCreateEventService) CreateEvent(ctx context.Context, req *models.CreateEventReq) (*models.CreateEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, req)
	ret0, _ := ret[0].(*models.CreateEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockCreateEventServiceMockRecorder) CreateEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockCreateEventService)(nil).CreateEvent), ctx, req)
}

// MockGetEventByIdService is a mock of GetEventByIdService interface.
type MockGetEventByIdService struct {
	ctrl     *gomock.Controller
	recorder *MockGetEventByIdServiceMockRecorder
}

// MockGetEventByIdServiceMockRecorder is the mock recorder for MockGetEventByIdService.
type MockGetEventByIdServiceMockRecorder struct {
	mock *MockGetEventByIdService
}

// NewMockGetEventByIdService creates a new mock instance.
func NewMockGetEventByIdService(ctrl *gomock.Controller) *MockGetEventByIdService {
	mock := &MockGetEventByIdService{ctrl: ctrl}
	mock.recorder = &MockGetEventByIdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetEventByIdService) EXPECT() *MockGetEventByIdServiceMockRecorder {
	return m.recorder
}

// GetEventById mocks base method.
func (m *MockGetEventByIdService) GetEventById(ctx context.Context, req *models.GetEventByIdReq) (*models.GetEventByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventById", ctx, req)
	ret0, _ := ret[0].(*models.GetEventByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventById indicates an expected call of GetEventById.
func (mr *MockGetEventByIdServiceMockRecorder) GetEventById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockGetEventByIdService)(nil).GetEventById), ctx, req)
}

// MockGetEventService is a mock of GetEventService interface.
type MockGetEventService struct {
	ctrl     *gomock.Controller
	recorder *MockGetEventServiceMockRecorder
}

// MockGetEventServiceMockRecorder is the mock recorder for MockGetEventService.
type MockGetEventServiceMockRecorder struct {
	mock *MockGetEventService
}

// NewMockGetEventService creates a new mock instance.
func NewMockGetEventService(ctrl *gomock.Controller) *MockGetEventService {
	mock := &MockGetEventService{ctrl: ctrl}
	mock.recorder = &MockGetEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetEventService) EXPECT() *MockGetEventServiceMockRecorder {
	return m.recorder
}

// GetEvent mocks base method.
func (m *MockGetEventService) GetEvent(ctx context.Context, req *models.GetEventReq) (*models.GetEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, req)
	ret0, _ := ret[0].(*models.GetEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockGetEventServiceMockRecorder) GetEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockGetEventService)(nil).GetEvent), ctx, req)
}

// MockUpdateEventService is a mock of UpdateEventService interface.
type MockUpdateEventService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateEventServiceMockRecorder
}

// MockUpdateEventServiceMockRecorder is the mock recorder for MockUpdateEventService.
type MockUpdateEventServiceMockRecorder struct {
	mock *MockUpdateEventService
}

// NewMockUpdateEventService creates a new mock instance.
func NewMockUpdateEventService(ctrl *gomock.Controller) *MockUpdateEventService {
	mock := &MockUpdateEventService{ctrl: ctrl}
	mock.recorder = &MockUpdateEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateEventService) EXPECT() *MockUpdateEventServiceMockRecorder {
	return m.recorder
}

// UpdateEvent mocks base method.
func (m *MockUpdateEventService) UpdateEvent(ctx context.Context, req *models.UpdateEventReq) (*models.UpdateEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, req)
	ret0, _ := ret[0].(*models.UpdateEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockUpdateEventServiceMockRecorder) UpdateEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockUpdateEventService)(nil).UpdateEvent), ctx, req)
}

// MockDeleteEventService is a mock of DeleteEventService interface.
type MockDeleteEventService struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteEventServiceMockRecorder
}

// MockDeleteEventServiceMockRecorder is the mock recorder for MockDeleteEventService.
type MockDeleteEventServiceMockRecorder struct {
	mock *MockDeleteEventService
}

// NewMockDeleteEventService creates a new mock instance.
func NewMockDeleteEventService(ctrl *gomock.Controller) *MockDeleteEventService {
	mock := &MockDeleteEventService{ctrl: ctrl}
	mock.recorder = &MockDeleteEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteEventService) EXPECT() *MockDeleteEventServiceMockRecorder {
	return m.recorder
}

// DeleteEvent mocks base method.
func (m *MockDeleteEventService) DeleteEvent(ctx context.Context, req *models.DeleteEventReq) (*models.DeleteEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, req)
	ret0, _ := ret[0].(*models.DeleteEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockDeleteEventServiceMockRecorder) DeleteEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockDeleteEventService)(nil).DeleteEvent), ctx, req)
}

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventService) CreateEvent(ctx context.Context, req *models.CreateEventReq) (*models.CreateEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, req)
	ret0, _ := ret[0].(*models.CreateEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventServiceMockRecorder) CreateEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventService)(nil).CreateEvent), ctx, req)
}

// DeleteEvent mocks base method.
func (m *MockEventService) DeleteEvent(ctx context.Context, req *models.DeleteEventReq) (*models.DeleteEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, req)
	ret0, _ := ret[0].(*models.DeleteEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventServiceMockRecorder) DeleteEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventService)(nil).DeleteEvent), ctx, req)
}

// GetEvent mocks base method.
func (m *MockEventService) GetEvent(ctx context.Context, req *models.GetEventReq) (*models.GetEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, req)
	ret0, _ := ret[0].(*models.GetEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventServiceMockRecorder) GetEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventService)(nil).GetEvent), ctx, req)
}

// GetEventById mocks base method.
func (m *MockEventService) GetEventById(ctx context.Context, req *models.GetEventByIdReq) (*models.GetEventByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventById", ctx, req)
	ret0, _ := ret[0].(*models.GetEventByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventById indicates an expected call of GetEventById.
func (mr *MockEventServiceMockRecorder) GetEventById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockEventService)(nil).GetEventById), ctx, req)
}

// UpdateEvent mocks base method.
func (m *MockEventService) UpdateEvent(ctx context.Context, req *models.UpdateEventReq) (*models.UpdateEventResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, req)
	ret0, _ := ret[0].(*models.UpdateEventResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventServiceMockRecorder) UpdateEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventService)(nil).UpdateEvent), ctx, req)
}

// MockEventDTOService is a mock of EventDTOService interface.
type MockEventDTOService struct {
	ctrl     *gomock.Controller
	recorder *MockEventDTOServiceMockRecorder
}

// MockEventDTOServiceMockRecorder is the mock recorder for MockEventDTOService.
type MockEventDTOServiceMockRecorder struct {
	mock *MockEventDTOService
}

// NewMockEventDTOService creates a new mock instance.
func NewMockEventDTOService(ctrl *gomock.Controller) *MockEventDTOService {
	mock := &MockEventDTOService{ctrl: ctrl}
	mock.recorder = &MockEventDTOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDTOService) EXPECT() *MockEventDTOServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOEvent mocks base method.
func (m *MockEventDTOService) ConvertDBOToDTOEvent(ctx context.Context, eve *models.Event) (*models.EventDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOEvent", ctx, eve)
	ret0, _ := ret[0].(*models.EventDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOEvent indicates an expected call of ConvertDBOToDTOEvent.
func (mr *MockEventDTOServiceMockRecorder) ConvertDBOToDTOEvent(ctx, eve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOEvent", reflect.TypeOf((*MockEventDTOService)(nil).ConvertDBOToDTOEvent), ctx, eve)
}

// MockGetRatingByIdService is a mock of GetRatingByIdService interface.
type MockGetRatingByIdService struct {
	ctrl     *gomock.Controller
	recorder *MockGetRatingByIdServiceMockRecorder
}

// MockGetRatingByIdServiceMockRecorder is the mock recorder for MockGetRatingByIdService.
type MockGetRatingByIdServiceMockRecorder struct {
	mock *MockGetRatingByIdService
}

// NewMockGetRatingByIdService creates a new mock instance.
func NewMockGetRatingByIdService(ctrl *gomock.Controller) *MockGetRatingByIdService {
	mock := &MockGetRatingByIdService{ctrl: ctrl}
	mock.recorder = &MockGetRatingByIdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetRatingByIdService) EXPECT() *MockGetRatingByIdServiceMockRecorder {
	return m.recorder
}

// GetRatingById mocks base method.
func (m *MockGetRatingByIdService) GetRatingById(ctx context.Context, req *models.GetRatingByIdReq) (*models.GetRatingByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingById", ctx, req)
	ret0, _ := ret[0].(*models.GetRatingByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingById indicates an expected call of GetRatingById.
func (mr *MockGetRatingByIdServiceMockRecorder) GetRatingById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingById", reflect.TypeOf((*MockGetRatingByIdService)(nil).GetRatingById), ctx, req)
}

// MockGetRatingService is a mock of GetRatingService interface.
type MockGetRatingService struct {
	ctrl     *gomock.Controller
	recorder *MockGetRatingServiceMockRecorder
}

// MockGetRatingServiceMockRecorder is the mock recorder for MockGetRatingService.
type MockGetRatingServiceMockRecorder struct {
	mock *MockGetRatingService
}

// NewMockGetRatingService creates a new mock instance.
func NewMockGetRatingService(ctrl *gomock.Controller) *MockGetRatingService {
	mock := &MockGetRatingService{ctrl: ctrl}
	mock.recorder = &MockGetRatingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetRatingService) EXPECT() *MockGetRatingServiceMockRecorder {
	return m.recorder
}

// GetRating mocks base method.
func (m *MockGetRatingService) GetRating(ctx context.Context, req *models.GetRatingReq) (*models.GetRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", ctx, req)
	ret0, _ := ret[0].(*models.GetRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockGetRatingServiceMockRecorder) GetRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockGetRatingService)(nil).GetRating), ctx, req)
}

// MockCreateRatingService is a mock of CreateRatingService interface.
type MockCreateRatingService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateRatingServiceMockRecorder
}

// MockCreateRatingServiceMockRecorder is the mock recorder for MockCreateRatingService.
type MockCreateRatingServiceMockRecorder struct {
	mock *MockCreateRatingService
}

// NewMockCreateRatingService creates a new mock instance.
func NewMockCreateRatingService(ctrl *gomock.Controller) *MockCreateRatingService {
	mock := &MockCreateRatingService{ctrl: ctrl}
	mock.recorder = &MockCreateRatingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateRatingService) EXPECT() *MockCreateRatingServiceMockRecorder {
	return m.recorder
}

// CreateRating mocks base method.
func (m *MockCreateRatingService) CreateRating(ctx context.Context, req *models.CreateRatingReq) (*models.CreateRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRating", ctx, req)
	ret0, _ := ret[0].(*models.CreateRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRating indicates an expected call of CreateRating.
func (mr *MockCreateRatingServiceMockRecorder) CreateRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRating", reflect.TypeOf((*MockCreateRatingService)(nil).CreateRating), ctx, req)
}

// MockUpdateRatingService is a mock of UpdateRatingService interface.
type MockUpdateRatingService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateRatingServiceMockRecorder
}

// MockUpdateRatingServiceMockRecorder is the mock recorder for MockUpdateRatingService.
type MockUpdateRatingServiceMockRecorder struct {
	mock *MockUpdateRatingService
}

// NewMockUpdateRatingService creates a new mock instance.
func NewMockUpdateRatingService(ctrl *gomock.Controller) *MockUpdateRatingService {
	mock := &MockUpdateRatingService{ctrl: ctrl}
	mock.recorder = &MockUpdateRatingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateRatingService) EXPECT() *MockUpdateRatingServiceMockRecorder {
	return m.recorder
}

// UpdateRating mocks base method.
func (m *MockUpdateRatingService) UpdateRating(ctx context.Context, req *models.UpdateRatingReq) (*models.UpdateRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", ctx, req)
	ret0, _ := ret[0].(*models.UpdateRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockUpdateRatingServiceMockRecorder) UpdateRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockUpdateRatingService)(nil).UpdateRating), ctx, req)
}

// MockDeleteRatingService is a mock of DeleteRatingService interface.
type MockDeleteRatingService struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteRatingServiceMockRecorder
}

// MockDeleteRatingServiceMockRecorder is the mock recorder for MockDeleteRatingService.
type MockDeleteRatingServiceMockRecorder struct {
	mock *MockDeleteRatingService
}

// NewMockDeleteRatingService creates a new mock instance.
func NewMockDeleteRatingService(ctrl *gomock.Controller) *MockDeleteRatingService {
	mock := &MockDeleteRatingService{ctrl: ctrl}
	mock.recorder = &MockDeleteRatingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteRatingService) EXPECT() *MockDeleteRatingServiceMockRecorder {
	return m.recorder
}

// DeleteRating mocks base method.
func (m *MockDeleteRatingService) DeleteRating(ctx context.Context, req *models.DeleteRatingReq) (*models.DeleteRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRating", ctx, req)
	ret0, _ := ret[0].(*models.DeleteRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRating indicates an expected call of DeleteRating.
func (mr *MockDeleteRatingServiceMockRecorder) DeleteRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRating", reflect.TypeOf((*MockDeleteRatingService)(nil).DeleteRating), ctx, req)
}

// MockRatingService is a mock of RatingService interface.
type MockRatingService struct {
	ctrl     *gomock.Controller
	recorder *MockRatingServiceMockRecorder
}

// MockRatingServiceMockRecorder is the mock recorder for MockRatingService.
type MockRatingServiceMockRecorder struct {
	mock *MockRatingService
}

// NewMockRatingService creates a new mock instance.
func NewMockRatingService(ctrl *gomock.Controller) *MockRatingService {
	mock := &MockRatingService{ctrl: ctrl}
	mock.recorder = &MockRatingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingService) EXPECT() *MockRatingServiceMockRecorder {
	return m.recorder
}

// CreateRating mocks base method.
func (m *MockRatingService) CreateRating(ctx context.Context, req *models.CreateRatingReq) (*models.CreateRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRating", ctx, req)
	ret0, _ := ret[0].(*models.CreateRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRating indicates an expected call of CreateRating.
func (mr *MockRatingServiceMockRecorder) CreateRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRating", reflect.TypeOf((*MockRatingService)(nil).CreateRating), ctx, req)
}

// DeleteRating mocks base method.
func (m *MockRatingService) DeleteRating(ctx context.Context, req *models.DeleteRatingReq) (*models.DeleteRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRating", ctx, req)
	ret0, _ := ret[0].(*models.DeleteRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRating indicates an expected call of DeleteRating.
func (mr *MockRatingServiceMockRecorder) DeleteRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRating", reflect.TypeOf((*MockRatingService)(nil).DeleteRating), ctx, req)
}

// GetRating mocks base method.
func (m *MockRatingService) GetRating(ctx context.Context, req *models.GetRatingReq) (*models.GetRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", ctx, req)
	ret0, _ := ret[0].(*models.GetRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockRatingServiceMockRecorder) GetRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockRatingService)(nil).GetRating), ctx, req)
}

// GetRatingById mocks base method.
func (m *MockRatingService) GetRatingById(ctx context.Context, req *models.GetRatingByIdReq) (*models.GetRatingByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingById", ctx, req)
	ret0, _ := ret[0].(*models.GetRatingByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingById indicates an expected call of GetRatingById.
func (mr *MockRatingServiceMockRecorder) GetRatingById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingById", reflect.TypeOf((*MockRatingService)(nil).GetRatingById), ctx, req)
}

// UpdateRating mocks base method.
func (m *MockRatingService) UpdateRating(ctx context.Context, req *models.UpdateRatingReq) (*models.UpdateRatingResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", ctx, req)
	ret0, _ := ret[0].(*models.UpdateRatingResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockRatingServiceMockRecorder) UpdateRating(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockRatingService)(nil).UpdateRating), ctx, req)
}

// MockRatingDTOService is a mock of RatingDTOService interface.
type MockRatingDTOService struct {
	ctrl     *gomock.Controller
	recorder *MockRatingDTOServiceMockRecorder
}

// MockRatingDTOServiceMockRecorder is the mock recorder for MockRatingDTOService.
type MockRatingDTOServiceMockRecorder struct {
	mock *MockRatingDTOService
}

// NewMockRatingDTOService creates a new mock instance.
func NewMockRatingDTOService(ctrl *gomock.Controller) *MockRatingDTOService {
	mock := &MockRatingDTOService{ctrl: ctrl}
	mock.recorder = &MockRatingDTOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingDTOService) EXPECT() *MockRatingDTOServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTORating mocks base method.
func (m *MockRatingDTOService) ConvertDBOToDTORating(ctx context.Context, rat *models.Rating) (*models.RatingDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTORating", ctx, rat)
	ret0, _ := ret[0].(*models.RatingDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTORating indicates an expected call of ConvertDBOToDTORating.
func (mr *MockRatingDTOServiceMockRecorder) ConvertDBOToDTORating(ctx, rat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTORating", reflect.TypeOf((*MockRatingDTOService)(nil).ConvertDBOToDTORating), ctx, rat)
}

// MockGetItineraryByIdService is a mock of GetItineraryByIdService interface.
type MockGetItineraryByIdService struct {
	ctrl     *gomock.Controller
	recorder *MockGetItineraryByIdServiceMockRecorder
}

// MockGetItineraryByIdServiceMockRecorder is the mock recorder for MockGetItineraryByIdService.
type MockGetItineraryByIdServiceMockRecorder struct {
	mock *MockGetItineraryByIdService
}

// NewMockGetItineraryByIdService creates a new mock instance.
func NewMockGetItineraryByIdService(ctrl *gomock.Controller) *MockGetItineraryByIdService {
	mock := &MockGetItineraryByIdService{ctrl: ctrl}
	mock.recorder = &MockGetItineraryByIdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetItineraryByIdService) EXPECT() *MockGetItineraryByIdServiceMockRecorder {
	return m.recorder
}

// GetItineraryById mocks base method.
func (m *MockGetItineraryByIdService) GetItineraryById(ctx context.Context, req *models.GetItineraryByIdReq) (*models.GetItineraryByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItineraryById", ctx, req)
	ret0, _ := ret[0].(*models.GetItineraryByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItineraryById indicates an expected call of GetItineraryById.
func (mr *MockGetItineraryByIdServiceMockRecorder) GetItineraryById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItineraryById", reflect.TypeOf((*MockGetItineraryByIdService)(nil).GetItineraryById), ctx, req)
}

// MockGetItineraryService is a mock of GetItineraryService interface.
type MockGetItineraryService struct {
	ctrl     *gomock.Controller
	recorder *MockGetItineraryServiceMockRecorder
}

// MockGetItineraryServiceMockRecorder is the mock recorder for MockGetItineraryService.
type MockGetItineraryServiceMockRecorder struct {
	mock *MockGetItineraryService
}

// NewMockGetItineraryService creates a new mock instance.
func NewMockGetItineraryService(ctrl *gomock.Controller) *MockGetItineraryService {
	mock := &MockGetItineraryService{ctrl: ctrl}
	mock.recorder = &MockGetItineraryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetItineraryService) EXPECT() *MockGetItineraryServiceMockRecorder {
	return m.recorder
}

// GetItinerary mocks base method.
func (m *MockGetItineraryService) GetItinerary(ctx context.Context, req *models.GetItineraryReq) (*models.GetItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItinerary", ctx, req)
	ret0, _ := ret[0].(*models.GetItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItinerary indicates an expected call of GetItinerary.
func (mr *MockGetItineraryServiceMockRecorder) GetItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItinerary", reflect.TypeOf((*MockGetItineraryService)(nil).GetItinerary), ctx, req)
}

// MockCreateItineraryService is a mock of CreateItineraryService interface.
type MockCreateItineraryService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateItineraryServiceMockRecorder
}

// MockCreateItineraryServiceMockRecorder is the mock recorder for MockCreateItineraryService.
type MockCreateItineraryServiceMockRecorder struct {
	mock *MockCreateItineraryService
}

// NewMockCreateItineraryService creates a new mock instance.
func NewMockCreateItineraryService(ctrl *gomock.Controller) *MockCreateItineraryService {
	mock := &MockCreateItineraryService{ctrl: ctrl}
	mock.recorder = &MockCreateItineraryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateItineraryService) EXPECT() *MockCreateItineraryServiceMockRecorder {
	return m.recorder
}

// CreateItinerary mocks base method.
func (m *MockCreateItineraryService) CreateItinerary(ctx context.Context, req *models.CreateItineraryReq) (*models.CreateItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItinerary", ctx, req)
	ret0, _ := ret[0].(*models.CreateItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItinerary indicates an expected call of CreateItinerary.
func (mr *MockCreateItineraryServiceMockRecorder) CreateItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItinerary", reflect.TypeOf((*MockCreateItineraryService)(nil).CreateItinerary), ctx, req)
}

// MockUpdateItineraryService is a mock of UpdateItineraryService interface.
type MockUpdateItineraryService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateItineraryServiceMockRecorder
}

// MockUpdateItineraryServiceMockRecorder is the mock recorder for MockUpdateItineraryService.
type MockUpdateItineraryServiceMockRecorder struct {
	mock *MockUpdateItineraryService
}

// NewMockUpdateItineraryService creates a new mock instance.
func NewMockUpdateItineraryService(ctrl *gomock.Controller) *MockUpdateItineraryService {
	mock := &MockUpdateItineraryService{ctrl: ctrl}
	mock.recorder = &MockUpdateItineraryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateItineraryService) EXPECT() *MockUpdateItineraryServiceMockRecorder {
	return m.recorder
}

// UpdateItinerary mocks base method.
func (m *MockUpdateItineraryService) UpdateItinerary(ctx context.Context, req *models.UpdateItineraryReq) (*models.UpdateItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItinerary", ctx, req)
	ret0, _ := ret[0].(*models.UpdateItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItinerary indicates an expected call of UpdateItinerary.
func (mr *MockUpdateItineraryServiceMockRecorder) UpdateItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItinerary", reflect.TypeOf((*MockUpdateItineraryService)(nil).UpdateItinerary), ctx, req)
}

// MockDeleteItineraryService is a mock of DeleteItineraryService interface.
type MockDeleteItineraryService struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteItineraryServiceMockRecorder
}

// MockDeleteItineraryServiceMockRecorder is the mock recorder for MockDeleteItineraryService.
type MockDeleteItineraryServiceMockRecorder struct {
	mock *MockDeleteItineraryService
}

// NewMockDeleteItineraryService creates a new mock instance.
func NewMockDeleteItineraryService(ctrl *gomock.Controller) *MockDeleteItineraryService {
	mock := &MockDeleteItineraryService{ctrl: ctrl}
	mock.recorder = &MockDeleteItineraryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteItineraryService) EXPECT() *MockDeleteItineraryServiceMockRecorder {
	return m.recorder
}

// DeleteItinerary mocks base method.
func (m *MockDeleteItineraryService) DeleteItinerary(ctx context.Context, req *models.DeleteItineraryReq) (*models.DeleteItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItinerary", ctx, req)
	ret0, _ := ret[0].(*models.DeleteItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItinerary indicates an expected call of DeleteItinerary.
func (mr *MockDeleteItineraryServiceMockRecorder) DeleteItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItinerary", reflect.TypeOf((*MockDeleteItineraryService)(nil).DeleteItinerary), ctx, req)
}

// MockItineraryService is a mock of ItineraryService interface.
type MockItineraryService struct {
	ctrl     *gomock.Controller
	recorder *MockItineraryServiceMockRecorder
}

// MockItineraryServiceMockRecorder is the mock recorder for MockItineraryService.
type MockItineraryServiceMockRecorder struct {
	mock *MockItineraryService
}

// NewMockItineraryService creates a new mock instance.
func NewMockItineraryService(ctrl *gomock.Controller) *MockItineraryService {
	mock := &MockItineraryService{ctrl: ctrl}
	mock.recorder = &MockItineraryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItineraryService) EXPECT() *MockItineraryServiceMockRecorder {
	return m.recorder
}

// CreateItinerary mocks base method.
func (m *MockItineraryService) CreateItinerary(ctx context.Context, req *models.CreateItineraryReq) (*models.CreateItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItinerary", ctx, req)
	ret0, _ := ret[0].(*models.CreateItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItinerary indicates an expected call of CreateItinerary.
func (mr *MockItineraryServiceMockRecorder) CreateItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItinerary", reflect.TypeOf((*MockItineraryService)(nil).CreateItinerary), ctx, req)
}

// DeleteItinerary mocks base method.
func (m *MockItineraryService) DeleteItinerary(ctx context.Context, req *models.DeleteItineraryReq) (*models.DeleteItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItinerary", ctx, req)
	ret0, _ := ret[0].(*models.DeleteItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItinerary indicates an expected call of DeleteItinerary.
func (mr *MockItineraryServiceMockRecorder) DeleteItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItinerary", reflect.TypeOf((*MockItineraryService)(nil).DeleteItinerary), ctx, req)
}

// GetItinerary mocks base method.
func (m *MockItineraryService) GetItinerary(ctx context.Context, req *models.GetItineraryReq) (*models.GetItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItinerary", ctx, req)
	ret0, _ := ret[0].(*models.GetItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItinerary indicates an expected call of GetItinerary.
func (mr *MockItineraryServiceMockRecorder) GetItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItinerary", reflect.TypeOf((*MockItineraryService)(nil).GetItinerary), ctx, req)
}

// GetItineraryById mocks base method.
func (m *MockItineraryService) GetItineraryById(ctx context.Context, req *models.GetItineraryByIdReq) (*models.GetItineraryByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItineraryById", ctx, req)
	ret0, _ := ret[0].(*models.GetItineraryByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItineraryById indicates an expected call of GetItineraryById.
func (mr *MockItineraryServiceMockRecorder) GetItineraryById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItineraryById", reflect.TypeOf((*MockItineraryService)(nil).GetItineraryById), ctx, req)
}

// UpdateItinerary mocks base method.
func (m *MockItineraryService) UpdateItinerary(ctx context.Context, req *models.UpdateItineraryReq) (*models.UpdateItineraryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItinerary", ctx, req)
	ret0, _ := ret[0].(*models.UpdateItineraryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItinerary indicates an expected call of UpdateItinerary.
func (mr *MockItineraryServiceMockRecorder) UpdateItinerary(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItinerary", reflect.TypeOf((*MockItineraryService)(nil).UpdateItinerary), ctx, req)
}

// MockItineraryDTOService is a mock of ItineraryDTOService interface.
type MockItineraryDTOService struct {
	ctrl     *gomock.Controller
	recorder *MockItineraryDTOServiceMockRecorder
}

// MockItineraryDTOServiceMockRecorder is the mock recorder for MockItineraryDTOService.
type MockItineraryDTOServiceMockRecorder struct {
	mock *MockItineraryDTOService
}

// NewMockItineraryDTOService creates a new mock instance.
func NewMockItineraryDTOService(ctrl *gomock.Controller) *MockItineraryDTOService {
	mock := &MockItineraryDTOService{ctrl: ctrl}
	mock.recorder = &MockItineraryDTOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItineraryDTOService) EXPECT() *MockItineraryDTOServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOItinerary mocks base method.
func (m *MockItineraryDTOService) ConvertDBOToDTOItinerary(ctx context.Context, att *models.Itinerary) (*models.ItineraryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOItinerary", ctx, att)
	ret0, _ := ret[0].(*models.ItineraryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOItinerary indicates an expected call of ConvertDBOToDTOItinerary.
func (mr *MockItineraryDTOServiceMockRecorder) ConvertDBOToDTOItinerary(ctx, att interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOItinerary", reflect.TypeOf((*MockItineraryDTOService)(nil).ConvertDBOToDTOItinerary), ctx, att)
}

// MockGetCoordinateByIdService is a mock of GetCoordinateByIdService interface.
type MockGetCoordinateByIdService struct {
	ctrl     *gomock.Controller
	recorder *MockGetCoordinateByIdServiceMockRecorder
}

// MockGetCoordinateByIdServiceMockRecorder is the mock recorder for MockGetCoordinateByIdService.
type MockGetCoordinateByIdServiceMockRecorder struct {
	mock *MockGetCoordinateByIdService
}

// NewMockGetCoordinateByIdService creates a new mock instance.
func NewMockGetCoordinateByIdService(ctrl *gomock.Controller) *MockGetCoordinateByIdService {
	mock := &MockGetCoordinateByIdService{ctrl: ctrl}
	mock.recorder = &MockGetCoordinateByIdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetCoordinateByIdService) EXPECT() *MockGetCoordinateByIdServiceMockRecorder {
	return m.recorder
}

// GetCoordinateById mocks base method.
func (m *MockGetCoordinateByIdService) GetCoordinateById(ctx context.Context, req *models.GetCoordinateByIdReq) (*models.GetCoordinateByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinateById", ctx, req)
	ret0, _ := ret[0].(*models.GetCoordinateByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinateById indicates an expected call of GetCoordinateById.
func (mr *MockGetCoordinateByIdServiceMockRecorder) GetCoordinateById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinateById", reflect.TypeOf((*MockGetCoordinateByIdService)(nil).GetCoordinateById), ctx, req)
}

// MockGetCoordinateService is a mock of GetCoordinateService interface.
type MockGetCoordinateService struct {
	ctrl     *gomock.Controller
	recorder *MockGetCoordinateServiceMockRecorder
}

// MockGetCoordinateServiceMockRecorder is the mock recorder for MockGetCoordinateService.
type MockGetCoordinateServiceMockRecorder struct {
	mock *MockGetCoordinateService
}

// NewMockGetCoordinateService creates a new mock instance.
func NewMockGetCoordinateService(ctrl *gomock.Controller) *MockGetCoordinateService {
	mock := &MockGetCoordinateService{ctrl: ctrl}
	mock.recorder = &MockGetCoordinateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetCoordinateService) EXPECT() *MockGetCoordinateServiceMockRecorder {
	return m.recorder
}

// GetCoordinate mocks base method.
func (m *MockGetCoordinateService) GetCoordinate(ctx context.Context, req *models.GetCoordinateReq) (*models.GetCoordinateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinate", ctx, req)
	ret0, _ := ret[0].(*models.GetCoordinateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinate indicates an expected call of GetCoordinate.
func (mr *MockGetCoordinateServiceMockRecorder) GetCoordinate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinate", reflect.TypeOf((*MockGetCoordinateService)(nil).GetCoordinate), ctx, req)
}

// MockCreateCoordinateService is a mock of CreateCoordinateService interface.
type MockCreateCoordinateService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateCoordinateServiceMockRecorder
}

// MockCreateCoordinateServiceMockRecorder is the mock recorder for MockCreateCoordinateService.
type MockCreateCoordinateServiceMockRecorder struct {
	mock *MockCreateCoordinateService
}

// NewMockCreateCoordinateService creates a new mock instance.
func NewMockCreateCoordinateService(ctrl *gomock.Controller) *MockCreateCoordinateService {
	mock := &MockCreateCoordinateService{ctrl: ctrl}
	mock.recorder = &MockCreateCoordinateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateCoordinateService) EXPECT() *MockCreateCoordinateServiceMockRecorder {
	return m.recorder
}

// CreateCoordinate mocks base method.
func (m *MockCreateCoordinateService) CreateCoordinate(ctx context.Context, req *models.CreateCoordinateReq) (*models.CreateCoordinateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoordinate", ctx, req)
	ret0, _ := ret[0].(*models.CreateCoordinateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoordinate indicates an expected call of CreateCoordinate.
func (mr *MockCreateCoordinateServiceMockRecorder) CreateCoordinate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoordinate", reflect.TypeOf((*MockCreateCoordinateService)(nil).CreateCoordinate), ctx, req)
}

// MockUpdateCoordinateService is a mock of UpdateCoordinateService interface.
type MockUpdateCoordinateService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateCoordinateServiceMockRecorder
}

// MockUpdateCoordinateServiceMockRecorder is the mock recorder for MockUpdateCoordinateService.
type MockUpdateCoordinateServiceMockRecorder struct {
	mock *MockUpdateCoordinateService
}

// NewMockUpdateCoordinateService creates a new mock instance.
func NewMockUpdateCoordinateService(ctrl *gomock.Controller) *MockUpdateCoordinateService {
	mock := &MockUpdateCoordinateService{ctrl: ctrl}
	mock.recorder = &MockUpdateCoordinateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateCoordinateService) EXPECT() *MockUpdateCoordinateServiceMockRecorder {
	return m.recorder
}

// UpdateCoordinate mocks base method.
func (m *MockUpdateCoordinateService) UpdateCoordinate(ctx context.Context, req *models.UpdateCoordinateReq) (*models.UpdateCoordinateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoordinate", ctx, req)
	ret0, _ := ret[0].(*models.UpdateCoordinateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoordinate indicates an expected call of UpdateCoordinate.
func (mr *MockUpdateCoordinateServiceMockRecorder) UpdateCoordinate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoordinate", reflect.TypeOf((*MockUpdateCoordinateService)(nil).UpdateCoordinate), ctx, req)
}

// MockDeleteCoordinateService is a mock of DeleteCoordinateService interface.
type MockDeleteCoordinateService struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteCoordinateServiceMockRecorder
}

// MockDeleteCoordinateServiceMockRecorder is the mock recorder for MockDeleteCoordinateService.
type MockDeleteCoordinateServiceMockRecorder struct {
	mock *MockDeleteCoordinateService
}

// NewMockDeleteCoordinateService creates a new mock instance.
func NewMockDeleteCoordinateService(ctrl *gomock.Controller) *MockDeleteCoordinateService {
	mock := &MockDeleteCoordinateService{ctrl: ctrl}
	mock.recorder = &MockDeleteCoordinateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteCoordinateService) EXPECT() *MockDeleteCoordinateServiceMockRecorder {
	return m.recorder
}

// DeleteCoordinate mocks base method.
func (m *MockDeleteCoordinateService) DeleteCoordinate(ctx context.Context, req *models.DeleteCoordinateReq) (*models.DeleteCoordinateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoordinate", ctx, req)
	ret0, _ := ret[0].(*models.DeleteCoordinateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCoordinate indicates an expected call of DeleteCoordinate.
func (mr *MockDeleteCoordinateServiceMockRecorder) DeleteCoordinate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoordinate", reflect.TypeOf((*MockDeleteCoordinateService)(nil).DeleteCoordinate), ctx, req)
}

// MockCoordinateService is a mock of CoordinateService interface.
type MockCoordinateService struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinateServiceMockRecorder
}

// MockCoordinateServiceMockRecorder is the mock recorder for MockCoordinateService.
type MockCoordinateServiceMockRecorder struct {
	mock *MockCoordinateService
}

// NewMockCoordinateService creates a new mock instance.
func NewMockCoordinateService(ctrl *gomock.Controller) *MockCoordinateService {
	mock := &MockCoordinateService{ctrl: ctrl}
	mock.recorder = &MockCoordinateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinateService) EXPECT() *MockCoordinateServiceMockRecorder {
	return m.recorder
}

// CreateCoordinate mocks base method.
func (m *MockCoordinateService) CreateCoordinate(ctx context.Context, req *models.CreateCoordinateReq) (*models.CreateCoordinateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoordinate", ctx, req)
	ret0, _ := ret[0].(*models.CreateCoordinateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoordinate indicates an expected call of CreateCoordinate.
func (mr *MockCoordinateServiceMockRecorder) CreateCoordinate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoordinate", reflect.TypeOf((*MockCoordinateService)(nil).CreateCoordinate), ctx, req)
}

// DeleteCoordinate mocks base method.
func (m *MockCoordinateService) DeleteCoordinate(ctx context.Context, req *models.DeleteCoordinateReq) (*models.DeleteCoordinateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoordinate", ctx, req)
	ret0, _ := ret[0].(*models.DeleteCoordinateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCoordinate indicates an expected call of DeleteCoordinate.
func (mr *MockCoordinateServiceMockRecorder) DeleteCoordinate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoordinate", reflect.TypeOf((*MockCoordinateService)(nil).DeleteCoordinate), ctx, req)
}

// GetCoordinate mocks base method.
func (m *MockCoordinateService) GetCoordinate(ctx context.Context, req *models.GetCoordinateReq) (*models.GetCoordinateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinate", ctx, req)
	ret0, _ := ret[0].(*models.GetCoordinateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinate indicates an expected call of GetCoordinate.
func (mr *MockCoordinateServiceMockRecorder) GetCoordinate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinate", reflect.TypeOf((*MockCoordinateService)(nil).GetCoordinate), ctx, req)
}

// GetCoordinateById mocks base method.
func (m *MockCoordinateService) GetCoordinateById(ctx context.Context, req *models.GetCoordinateByIdReq) (*models.GetCoordinateByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinateById", ctx, req)
	ret0, _ := ret[0].(*models.GetCoordinateByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinateById indicates an expected call of GetCoordinateById.
func (mr *MockCoordinateServiceMockRecorder) GetCoordinateById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinateById", reflect.TypeOf((*MockCoordinateService)(nil).GetCoordinateById), ctx, req)
}

// UpdateCoordinate mocks base method.
func (m *MockCoordinateService) UpdateCoordinate(ctx context.Context, req *models.UpdateCoordinateReq) (*models.UpdateCoordinateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoordinate", ctx, req)
	ret0, _ := ret[0].(*models.UpdateCoordinateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoordinate indicates an expected call of UpdateCoordinate.
func (mr *MockCoordinateServiceMockRecorder) UpdateCoordinate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoordinate", reflect.TypeOf((*MockCoordinateService)(nil).UpdateCoordinate), ctx, req)
}

// MockCoordinateDTOService is a mock of CoordinateDTOService interface.
type MockCoordinateDTOService struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinateDTOServiceMockRecorder
}

// MockCoordinateDTOServiceMockRecorder is the mock recorder for MockCoordinateDTOService.
type MockCoordinateDTOServiceMockRecorder struct {
	mock *MockCoordinateDTOService
}

// NewMockCoordinateDTOService creates a new mock instance.
func NewMockCoordinateDTOService(ctrl *gomock.Controller) *MockCoordinateDTOService {
	mock := &MockCoordinateDTOService{ctrl: ctrl}
	mock.recorder = &MockCoordinateDTOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinateDTOService) EXPECT() *MockCoordinateDTOServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOCoordinate mocks base method.
func (m *MockCoordinateDTOService) ConvertDBOToDTOCoordinate(ctx context.Context, cor *models.Coordinate) (*models.CoordinateDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOCoordinate", ctx, cor)
	ret0, _ := ret[0].(*models.CoordinateDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOCoordinate indicates an expected call of ConvertDBOToDTOCoordinate.
func (mr *MockCoordinateDTOServiceMockRecorder) ConvertDBOToDTOCoordinate(ctx, cor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOCoordinate", reflect.TypeOf((*MockCoordinateDTOService)(nil).ConvertDBOToDTOCoordinate), ctx, cor)
}

// MockGetTagByIdService is a mock of GetTagByIdService interface.
type MockGetTagByIdService struct {
	ctrl     *gomock.Controller
	recorder *MockGetTagByIdServiceMockRecorder
}

// MockGetTagByIdServiceMockRecorder is the mock recorder for MockGetTagByIdService.
type MockGetTagByIdServiceMockRecorder struct {
	mock *MockGetTagByIdService
}

// NewMockGetTagByIdService creates a new mock instance.
func NewMockGetTagByIdService(ctrl *gomock.Controller) *MockGetTagByIdService {
	mock := &MockGetTagByIdService{ctrl: ctrl}
	mock.recorder = &MockGetTagByIdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTagByIdService) EXPECT() *MockGetTagByIdServiceMockRecorder {
	return m.recorder
}

// GetTagById mocks base method.
func (m *MockGetTagByIdService) GetTagById(ctx context.Context, req *models.GetTagByIdReq) (*models.GetTagByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", ctx, req)
	ret0, _ := ret[0].(*models.GetTagByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockGetTagByIdServiceMockRecorder) GetTagById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockGetTagByIdService)(nil).GetTagById), ctx, req)
}

// MockGetTagService is a mock of GetTagService interface.
type MockGetTagService struct {
	ctrl     *gomock.Controller
	recorder *MockGetTagServiceMockRecorder
}

// MockGetTagServiceMockRecorder is the mock recorder for MockGetTagService.
type MockGetTagServiceMockRecorder struct {
	mock *MockGetTagService
}

// NewMockGetTagService creates a new mock instance.
func NewMockGetTagService(ctrl *gomock.Controller) *MockGetTagService {
	mock := &MockGetTagService{ctrl: ctrl}
	mock.recorder = &MockGetTagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTagService) EXPECT() *MockGetTagServiceMockRecorder {
	return m.recorder
}

// GetTag mocks base method.
func (m *MockGetTagService) GetTag(ctx context.Context, req *models.GetTagReq) (*models.GetTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, req)
	ret0, _ := ret[0].(*models.GetTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockGetTagServiceMockRecorder) GetTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockGetTagService)(nil).GetTag), ctx, req)
}

// MockCreateTagService is a mock of CreateTagService interface.
type MockCreateTagService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTagServiceMockRecorder
}

// MockCreateTagServiceMockRecorder is the mock recorder for MockCreateTagService.
type MockCreateTagServiceMockRecorder struct {
	mock *MockCreateTagService
}

// NewMockCreateTagService creates a new mock instance.
func NewMockCreateTagService(ctrl *gomock.Controller) *MockCreateTagService {
	mock := &MockCreateTagService{ctrl: ctrl}
	mock.recorder = &MockCreateTagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTagService) EXPECT() *MockCreateTagServiceMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockCreateTagService) CreateTag(ctx context.Context, req *models.CreateTagReq) (*models.CreateTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, req)
	ret0, _ := ret[0].(*models.CreateTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockCreateTagServiceMockRecorder) CreateTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockCreateTagService)(nil).CreateTag), ctx, req)
}

// MockUpdateTagService is a mock of UpdateTagService interface.
type MockUpdateTagService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateTagServiceMockRecorder
}

// MockUpdateTagServiceMockRecorder is the mock recorder for MockUpdateTagService.
type MockUpdateTagServiceMockRecorder struct {
	mock *MockUpdateTagService
}

// NewMockUpdateTagService creates a new mock instance.
func NewMockUpdateTagService(ctrl *gomock.Controller) *MockUpdateTagService {
	mock := &MockUpdateTagService{ctrl: ctrl}
	mock.recorder = &MockUpdateTagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateTagService) EXPECT() *MockUpdateTagServiceMockRecorder {
	return m.recorder
}

// UpdateTag mocks base method.
func (m *MockUpdateTagService) UpdateTag(ctx context.Context, req *models.UpdateTagReq) (*models.UpdateTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, req)
	ret0, _ := ret[0].(*models.UpdateTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockUpdateTagServiceMockRecorder) UpdateTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockUpdateTagService)(nil).UpdateTag), ctx, req)
}

// MockDeleteTagService is a mock of DeleteTagService interface.
type MockDeleteTagService struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteTagServiceMockRecorder
}

// MockDeleteTagServiceMockRecorder is the mock recorder for MockDeleteTagService.
type MockDeleteTagServiceMockRecorder struct {
	mock *MockDeleteTagService
}

// NewMockDeleteTagService creates a new mock instance.
func NewMockDeleteTagService(ctrl *gomock.Controller) *MockDeleteTagService {
	mock := &MockDeleteTagService{ctrl: ctrl}
	mock.recorder = &MockDeleteTagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteTagService) EXPECT() *MockDeleteTagServiceMockRecorder {
	return m.recorder
}

// DeleteTag mocks base method.
func (m *MockDeleteTagService) DeleteTag(ctx context.Context, req *models.DeleteTagReq) (*models.DeleteTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, req)
	ret0, _ := ret[0].(*models.DeleteTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockDeleteTagServiceMockRecorder) DeleteTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockDeleteTagService)(nil).DeleteTag), ctx, req)
}

// MockTagService is a mock of TagService interface.
type MockTagService struct {
	ctrl     *gomock.Controller
	recorder *MockTagServiceMockRecorder
}

// MockTagServiceMockRecorder is the mock recorder for MockTagService.
type MockTagServiceMockRecorder struct {
	mock *MockTagService
}

// NewMockTagService creates a new mock instance.
func NewMockTagService(ctrl *gomock.Controller) *MockTagService {
	mock := &MockTagService{ctrl: ctrl}
	mock.recorder = &MockTagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagService) EXPECT() *MockTagServiceMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockTagService) CreateTag(ctx context.Context, req *models.CreateTagReq) (*models.CreateTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, req)
	ret0, _ := ret[0].(*models.CreateTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockTagServiceMockRecorder) CreateTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagService)(nil).CreateTag), ctx, req)
}

// DeleteTag mocks base method.
func (m *MockTagService) DeleteTag(ctx context.Context, req *models.DeleteTagReq) (*models.DeleteTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, req)
	ret0, _ := ret[0].(*models.DeleteTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagServiceMockRecorder) DeleteTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagService)(nil).DeleteTag), ctx, req)
}

// GetTag mocks base method.
func (m *MockTagService) GetTag(ctx context.Context, req *models.GetTagReq) (*models.GetTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, req)
	ret0, _ := ret[0].(*models.GetTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockTagServiceMockRecorder) GetTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagService)(nil).GetTag), ctx, req)
}

// GetTagById mocks base method.
func (m *MockTagService) GetTagById(ctx context.Context, req *models.GetTagByIdReq) (*models.GetTagByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", ctx, req)
	ret0, _ := ret[0].(*models.GetTagByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockTagServiceMockRecorder) GetTagById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockTagService)(nil).GetTagById), ctx, req)
}

// UpdateTag mocks base method.
func (m *MockTagService) UpdateTag(ctx context.Context, req *models.UpdateTagReq) (*models.UpdateTagResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, req)
	ret0, _ := ret[0].(*models.UpdateTagResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockTagServiceMockRecorder) UpdateTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagService)(nil).UpdateTag), ctx, req)
}

// MockTagDTOService is a mock of TagDTOService interface.
type MockTagDTOService struct {
	ctrl     *gomock.Controller
	recorder *MockTagDTOServiceMockRecorder
}

// MockTagDTOServiceMockRecorder is the mock recorder for MockTagDTOService.
type MockTagDTOServiceMockRecorder struct {
	mock *MockTagDTOService
}

// NewMockTagDTOService creates a new mock instance.
func NewMockTagDTOService(ctrl *gomock.Controller) *MockTagDTOService {
	mock := &MockTagDTOService{ctrl: ctrl}
	mock.recorder = &MockTagDTOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagDTOService) EXPECT() *MockTagDTOServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOTag mocks base method.
func (m *MockTagDTOService) ConvertDBOToDTOTag(ctx context.Context, eve *models.Tag) (*models.TagDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOTag", ctx, eve)
	ret0, _ := ret[0].(*models.TagDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOTag indicates an expected call of ConvertDBOToDTOTag.
func (mr *MockTagDTOServiceMockRecorder) ConvertDBOToDTOTag(ctx, eve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOTag", reflect.TypeOf((*MockTagDTOService)(nil).ConvertDBOToDTOTag), ctx, eve)
}

// MockGetUserByIdService is a mock of GetUserByIdService interface.
type MockGetUserByIdService struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserByIdServiceMockRecorder
}

// MockGetUserByIdServiceMockRecorder is the mock recorder for MockGetUserByIdService.
type MockGetUserByIdServiceMockRecorder struct {
	mock *MockGetUserByIdService
}

// NewMockGetUserByIdService creates a new mock instance.
func NewMockGetUserByIdService(ctrl *gomock.Controller) *MockGetUserByIdService {
	mock := &MockGetUserByIdService{ctrl: ctrl}
	mock.recorder = &MockGetUserByIdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUserByIdService) EXPECT() *MockGetUserByIdServiceMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockGetUserByIdService) GetUserById(ctx context.Context, req *models.GetUserByIdReq) (*models.GetUserByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, req)
	ret0, _ := ret[0].(*models.GetUserByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockGetUserByIdServiceMockRecorder) GetUserById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockGetUserByIdService)(nil).GetUserById), ctx, req)
}

// MockGetUserService is a mock of GetUserService interface.
type MockGetUserService struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserServiceMockRecorder
}

// MockGetUserServiceMockRecorder is the mock recorder for MockGetUserService.
type MockGetUserServiceMockRecorder struct {
	mock *MockGetUserService
}

// NewMockGetUserService creates a new mock instance.
func NewMockGetUserService(ctrl *gomock.Controller) *MockGetUserService {
	mock := &MockGetUserService{ctrl: ctrl}
	mock.recorder = &MockGetUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUserService) EXPECT() *MockGetUserServiceMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockGetUserService) GetUser(ctx context.Context, req *models.GetUserReq) (*models.GetUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, req)
	ret0, _ := ret[0].(*models.GetUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockGetUserServiceMockRecorder) GetUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockGetUserService)(nil).GetUser), ctx, req)
}

// MockCreateUserService is a mock of CreateUserService interface.
type MockCreateUserService struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUserServiceMockRecorder
}

// MockCreateUserServiceMockRecorder is the mock recorder for MockCreateUserService.
type MockCreateUserServiceMockRecorder struct {
	mock *MockCreateUserService
}

// NewMockCreateUserService creates a new mock instance.
func NewMockCreateUserService(ctrl *gomock.Controller) *MockCreateUserService {
	mock := &MockCreateUserService{ctrl: ctrl}
	mock.recorder = &MockCreateUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateUserService) EXPECT() *MockCreateUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockCreateUserService) CreateUser(ctx context.Context, req *models.CreateUserReq) (*models.CreateUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*models.CreateUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCreateUserServiceMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCreateUserService)(nil).CreateUser), ctx, req)
}

// MockUpdateUserService is a mock of UpdateUserService interface.
type MockUpdateUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateUserServiceMockRecorder
}

// MockUpdateUserServiceMockRecorder is the mock recorder for MockUpdateUserService.
type MockUpdateUserServiceMockRecorder struct {
	mock *MockUpdateUserService
}

// NewMockUpdateUserService creates a new mock instance.
func NewMockUpdateUserService(ctrl *gomock.Controller) *MockUpdateUserService {
	mock := &MockUpdateUserService{ctrl: ctrl}
	mock.recorder = &MockUpdateUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateUserService) EXPECT() *MockUpdateUserServiceMockRecorder {
	return m.recorder
}

// UpdateUser mocks base method.
func (m *MockUpdateUserService) UpdateUser(ctx context.Context, req *models.UpdateUserReq) (*models.UpdateUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, req)
	ret0, _ := ret[0].(*models.UpdateUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUpdateUserServiceMockRecorder) UpdateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUpdateUserService)(nil).UpdateUser), ctx, req)
}

// MockDeleteUserService is a mock of DeleteUserService interface.
type MockDeleteUserService struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteUserServiceMockRecorder
}

// MockDeleteUserServiceMockRecorder is the mock recorder for MockDeleteUserService.
type MockDeleteUserServiceMockRecorder struct {
	mock *MockDeleteUserService
}

// NewMockDeleteUserService creates a new mock instance.
func NewMockDeleteUserService(ctrl *gomock.Controller) *MockDeleteUserService {
	mock := &MockDeleteUserService{ctrl: ctrl}
	mock.recorder = &MockDeleteUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteUserService) EXPECT() *MockDeleteUserServiceMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockDeleteUserService) DeleteUser(ctx context.Context, req *models.DeleteUserReq) (*models.DeleteUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, req)
	ret0, _ := ret[0].(*models.DeleteUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDeleteUserServiceMockRecorder) DeleteUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDeleteUserService)(nil).DeleteUser), ctx, req)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, req *models.CreateUserReq) (*models.CreateUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*models.CreateUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, req)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, req *models.DeleteUserReq) (*models.DeleteUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, req)
	ret0, _ := ret[0].(*models.DeleteUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, req)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(ctx context.Context, req *models.GetUserReq) (*models.GetUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, req)
	ret0, _ := ret[0].(*models.GetUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), ctx, req)
}

// GetUserById mocks base method.
func (m *MockUserService) GetUserById(ctx context.Context, req *models.GetUserByIdReq) (*models.GetUserByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, req)
	ret0, _ := ret[0].(*models.GetUserByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserServiceMockRecorder) GetUserById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserService)(nil).GetUserById), ctx, req)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(ctx context.Context, req *models.UpdateUserReq) (*models.UpdateUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, req)
	ret0, _ := ret[0].(*models.UpdateUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), ctx, req)
}

// MockUserDTOService is a mock of UserDTOService interface.
type MockUserDTOService struct {
	ctrl     *gomock.Controller
	recorder *MockUserDTOServiceMockRecorder
}

// MockUserDTOServiceMockRecorder is the mock recorder for MockUserDTOService.
type MockUserDTOServiceMockRecorder struct {
	mock *MockUserDTOService
}

// NewMockUserDTOService creates a new mock instance.
func NewMockUserDTOService(ctrl *gomock.Controller) *MockUserDTOService {
	mock := &MockUserDTOService{ctrl: ctrl}
	mock.recorder = &MockUserDTOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDTOService) EXPECT() *MockUserDTOServiceMockRecorder {
	return m.recorder
}

// ConvertDBOToDTOUser mocks base method.
func (m *MockUserDTOService) ConvertDBOToDTOUser(ctx context.Context, use *models.User) (*models.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDBOToDTOUser", ctx, use)
	ret0, _ := ret[0].(*models.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDBOToDTOUser indicates an expected call of ConvertDBOToDTOUser.
func (mr *MockUserDTOServiceMockRecorder) ConvertDBOToDTOUser(ctx, use interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDBOToDTOUser", reflect.TypeOf((*MockUserDTOService)(nil).ConvertDBOToDTOUser), ctx, use)
}

// MockFacadeDesignPatternService is a mock of FacadeDesignPatternService interface.
type MockFacadeDesignPatternService struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeDesignPatternServiceMockRecorder
}

// MockFacadeDesignPatternServiceMockRecorder is the mock recorder for MockFacadeDesignPatternService.
type MockFacadeDesignPatternServiceMockRecorder struct {
	mock *MockFacadeDesignPatternService
}

// NewMockFacadeDesignPatternService creates a new mock instance.
func NewMockFacadeDesignPatternService(ctrl *gomock.Controller) *MockFacadeDesignPatternService {
	mock := &MockFacadeDesignPatternService{ctrl: ctrl}
	mock.recorder = &MockFacadeDesignPatternServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeDesignPatternService) EXPECT() *MockFacadeDesignPatternServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFacadeDesignPatternService) Execute(ctx context.Context, req *models.ReqFacade, reqType string) (*models.RespFacade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, req, reqType)
	ret0, _ := ret[0].(*models.RespFacade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockFacadeDesignPatternServiceMockRecorder) Execute(ctx, req, reqType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFacadeDesignPatternService)(nil).Execute), ctx, req, reqType)
}
